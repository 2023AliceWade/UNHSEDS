
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000732c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007510  08007510  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007510  08007510  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007510  08007510  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007510  08007510  00017510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  2000000c  08007524  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08007524  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019045  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003547  00000000  00000000  00039081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0003c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  0003dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b22e  00000000  00000000  0003f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8c5  00000000  00000000  0006a44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104628  00000000  00000000  00085d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018a33b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006124  00000000  00000000  0018a38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800749c 	.word	0x0800749c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800749c 	.word	0x0800749c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fda9 	bl	8000d22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f82a 	bl	8000228 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001d4:	f000 f87a 	bl	80002cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 fa6c 	bl	80006b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001dc:	f000 f91e 	bl	800041c <MX_I2C1_Init>
  MX_I2C2_Init();
 80001e0:	f000 f95c 	bl	800049c <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80001e4:	f000 f99a 	bl	800051c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80001e8:	f000 f9ba 	bl	8000560 <MX_SPI1_Init>
  MX_SPI2_Init();
 80001ec:	f000 f9f6 	bl	80005dc <MX_SPI2_Init>
  MX_FATFS_Init();
 80001f0:	f006 ff2e 	bl	8007050 <MX_FATFS_Init>
  MX_USB_OTG_FS_PCD_Init();
 80001f4:	f000 fa30 	bl	8000658 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80001f8:	f000 f89a 	bl	8000330 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2102      	movs	r1, #2
 8000200:	4808      	ldr	r0, [pc, #32]	; (8000224 <main+0x5c>)
 8000202:	f002 f877 	bl	80022f4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020a:	f000 fdff 	bl	8000e0c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, TEST_OUTPUT_Pin, GPIO_PIN_SET);
 800020e:	2201      	movs	r2, #1
 8000210:	2102      	movs	r1, #2
 8000212:	4804      	ldr	r0, [pc, #16]	; (8000224 <main+0x5c>)
 8000214:	f002 f86e 	bl	80022f4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021c:	f000 fdf6 	bl	8000e0c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 8000220:	e7ec      	b.n	80001fc <main+0x34>
 8000222:	bf00      	nop
 8000224:	48000800 	.word	0x48000800

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b096      	sub	sp, #88	; 0x58
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0314 	add.w	r3, r7, #20
 8000232:	2244      	movs	r2, #68	; 0x44
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f007 f928 	bl	800748c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800024a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800024e:	f002 fae5 	bl	800281c <HAL_PWREx_ControlVoltageScaling>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000258:	f000 fabe 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800025c:	2310      	movs	r3, #16
 800025e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000268:	23a0      	movs	r3, #160	; 0xa0
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026c:	2302      	movs	r3, #2
 800026e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000270:	2301      	movs	r3, #1
 8000272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000274:	2302      	movs	r3, #2
 8000276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000278:	230a      	movs	r3, #10
 800027a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800027c:	2307      	movs	r3, #7
 800027e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000280:	2302      	movs	r3, #2
 8000282:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000284:	2302      	movs	r3, #2
 8000286:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	4618      	mov	r0, r3
 800028e:	f002 fb2b 	bl	80028e8 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000298:	f000 fa9e 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2303      	movs	r3, #3
 80002a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002b0:	463b      	mov	r3, r7
 80002b2:	2104      	movs	r1, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 fef3 	bl	80030a0 <HAL_RCC_ClockConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002c0:	f000 fa8a 	bl	80007d8 <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3758      	adds	r7, #88	; 0x58
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b0a2      	sub	sp, #136	; 0x88
 80002d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d2:	463b      	mov	r3, r7
 80002d4:	2288      	movs	r2, #136	; 0x88
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f007 f8d7 	bl	800748c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
 80002de:	f44f 2306 	mov.w	r3, #548864	; 0x86000
 80002e2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002e8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80002ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80002f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002f4:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002f6:	2301      	movs	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80002fe:	230c      	movs	r3, #12
 8000300:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000302:	2307      	movs	r3, #7
 8000304:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000306:	2304      	movs	r3, #4
 8000308:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800030a:	2304      	movs	r3, #4
 800030c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800030e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000312:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4618      	mov	r0, r3
 8000318:	f003 f8e6 	bl	80034e8 <HAL_RCCEx_PeriphCLKConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000322:	f000 fa59 	bl	80007d8 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3788      	adds	r7, #136	; 0x88
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	; 0x28
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000336:	f107 031c 	add.w	r3, r7, #28
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
 8000350:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000352:	4b2f      	ldr	r3, [pc, #188]	; (8000410 <MX_ADC1_Init+0xe0>)
 8000354:	4a2f      	ldr	r2, [pc, #188]	; (8000414 <MX_ADC1_Init+0xe4>)
 8000356:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <MX_ADC1_Init+0xe0>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800035e:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <MX_ADC1_Init+0xe0>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000364:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <MX_ADC1_Init+0xe0>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800036a:	4b29      	ldr	r3, [pc, #164]	; (8000410 <MX_ADC1_Init+0xe0>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000370:	4b27      	ldr	r3, [pc, #156]	; (8000410 <MX_ADC1_Init+0xe0>)
 8000372:	2204      	movs	r2, #4
 8000374:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000376:	4b26      	ldr	r3, [pc, #152]	; (8000410 <MX_ADC1_Init+0xe0>)
 8000378:	2200      	movs	r2, #0
 800037a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800037c:	4b24      	ldr	r3, [pc, #144]	; (8000410 <MX_ADC1_Init+0xe0>)
 800037e:	2200      	movs	r2, #0
 8000380:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000382:	4b23      	ldr	r3, [pc, #140]	; (8000410 <MX_ADC1_Init+0xe0>)
 8000384:	2201      	movs	r2, #1
 8000386:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <MX_ADC1_Init+0xe0>)
 800038a:	2200      	movs	r2, #0
 800038c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000390:	4b1f      	ldr	r3, [pc, #124]	; (8000410 <MX_ADC1_Init+0xe0>)
 8000392:	2200      	movs	r2, #0
 8000394:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000396:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <MX_ADC1_Init+0xe0>)
 8000398:	2200      	movs	r2, #0
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800039c:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <MX_ADC1_Init+0xe0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a4:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <MX_ADC1_Init+0xe0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003aa:	4b19      	ldr	r3, [pc, #100]	; (8000410 <MX_ADC1_Init+0xe0>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b2:	4817      	ldr	r0, [pc, #92]	; (8000410 <MX_ADC1_Init+0xe0>)
 80003b4:	f000 feda 	bl	800116c <HAL_ADC_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80003be:	f000 fa0b 	bl	80007d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003c6:	f107 031c 	add.w	r3, r7, #28
 80003ca:	4619      	mov	r1, r3
 80003cc:	4810      	ldr	r0, [pc, #64]	; (8000410 <MX_ADC1_Init+0xe0>)
 80003ce:	f001 fc39 	bl	8001c44 <HAL_ADCEx_MultiModeConfigChannel>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003d8:	f000 f9fe 	bl	80007d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003dc:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_ADC1_Init+0xe8>)
 80003de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e0:	2306      	movs	r3, #6
 80003e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003e8:	237f      	movs	r3, #127	; 0x7f
 80003ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003ec:	2304      	movs	r3, #4
 80003ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4619      	mov	r1, r3
 80003f8:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_ADC1_Init+0xe0>)
 80003fa:	f001 f80d 	bl	8001418 <HAL_ADC_ConfigChannel>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000404:	f000 f9e8 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	3728      	adds	r7, #40	; 0x28
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000028 	.word	0x20000028
 8000414:	50040000 	.word	0x50040000
 8000418:	14f00020 	.word	0x14f00020

0800041c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_I2C1_Init+0x74>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <MX_I2C1_Init+0x78>)
 8000424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_I2C1_Init+0x74>)
 8000428:	4a1b      	ldr	r2, [pc, #108]	; (8000498 <MX_I2C1_Init+0x7c>)
 800042a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 148;
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_I2C1_Init+0x74>)
 800042e:	2294      	movs	r2, #148	; 0x94
 8000430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_I2C1_Init+0x74>)
 8000434:	2201      	movs	r2, #1
 8000436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MX_I2C1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_I2C1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <MX_I2C1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_I2C1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_I2C1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000456:	480e      	ldr	r0, [pc, #56]	; (8000490 <MX_I2C1_Init+0x74>)
 8000458:	f001 ff64 	bl	8002324 <HAL_I2C_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000462:	f000 f9b9 	bl	80007d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000466:	2100      	movs	r1, #0
 8000468:	4809      	ldr	r0, [pc, #36]	; (8000490 <MX_I2C1_Init+0x74>)
 800046a:	f001 ffea 	bl	8002442 <HAL_I2CEx_ConfigAnalogFilter>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000474:	f000 f9b0 	bl	80007d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000478:	2100      	movs	r1, #0
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_I2C1_Init+0x74>)
 800047c:	f002 f82c 	bl	80024d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000486:	f000 f9a7 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	2000008c 	.word	0x2000008c
 8000494:	40005400 	.word	0x40005400
 8000498:	00702991 	.word	0x00702991

0800049c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_I2C2_Init+0x74>)
 80004a2:	4a1c      	ldr	r2, [pc, #112]	; (8000514 <MX_I2C2_Init+0x78>)
 80004a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_I2C2_Init+0x74>)
 80004a8:	4a1b      	ldr	r2, [pc, #108]	; (8000518 <MX_I2C2_Init+0x7c>)
 80004aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_I2C2_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_I2C2_Init+0x74>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_I2C2_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_I2C2_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <MX_I2C2_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_I2C2_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_I2C2_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004d6:	480e      	ldr	r0, [pc, #56]	; (8000510 <MX_I2C2_Init+0x74>)
 80004d8:	f001 ff24 	bl	8002324 <HAL_I2C_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004e2:	f000 f979 	bl	80007d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004e6:	2100      	movs	r1, #0
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <MX_I2C2_Init+0x74>)
 80004ea:	f001 ffaa 	bl	8002442 <HAL_I2CEx_ConfigAnalogFilter>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004f4:	f000 f970 	bl	80007d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004f8:	2100      	movs	r1, #0
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_I2C2_Init+0x74>)
 80004fc:	f001 ffec 	bl	80024d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000506:	f000 f967 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200000e0 	.word	0x200000e0
 8000514:	40005800 	.word	0x40005800
 8000518:	10909cec 	.word	0x10909cec

0800051c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <MX_SDMMC1_SD_Init+0x3c>)
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <MX_SDMMC1_SD_Init+0x40>)
 8000524:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_SDMMC1_SD_Init+0x3c>)
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <MX_SDMMC1_SD_Init+0x3c>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_SDMMC1_SD_Init+0x3c>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <MX_SDMMC1_SD_Init+0x3c>)
 800053a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800053e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <MX_SDMMC1_SD_Init+0x3c>)
 8000542:	2200      	movs	r2, #0
 8000544:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <MX_SDMMC1_SD_Init+0x3c>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000134 	.word	0x20000134
 800055c:	40012800 	.word	0x40012800

08000560 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_SPI1_Init+0x74>)
 8000566:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <MX_SPI1_Init+0x78>)
 8000568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_SPI1_Init+0x74>)
 800056c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_SPI1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_SPI1_Init+0x74>)
 800057a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800057e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_SPI1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_SPI1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_SPI1_Init+0x74>)
 800058e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000592:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_SPI1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_SPI1_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_SPI1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_SPI1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_SPI1_Init+0x74>)
 80005ae:	2207      	movs	r2, #7
 80005b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_SPI1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_SPI1_Init+0x74>)
 80005ba:	2208      	movs	r2, #8
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_SPI1_Init+0x74>)
 80005c0:	f005 fc76 	bl	8005eb0 <HAL_SPI_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005ca:	f000 f905 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001b8 	.word	0x200001b8
 80005d8:	40013000 	.word	0x40013000

080005dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_SPI2_Init+0x74>)
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <MX_SPI2_Init+0x78>)
 80005e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_SPI2_Init+0x74>)
 80005e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_SPI2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_SPI2_Init+0x74>)
 80005f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_SPI2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_SPI2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_SPI2_Init+0x74>)
 800060a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800060e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_SPI2_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_SPI2_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_SPI2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_SPI2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_SPI2_Init+0x74>)
 800062a:	2207      	movs	r2, #7
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_SPI2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_SPI2_Init+0x74>)
 8000636:	2208      	movs	r2, #8
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_SPI2_Init+0x74>)
 800063c:	f005 fc38 	bl	8005eb0 <HAL_SPI_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000646:	f000 f8c7 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000021c 	.word	0x2000021c
 8000654:	40003800 	.word	0x40003800

08000658 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800065e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000662:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000666:	2206      	movs	r2, #6
 8000668:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800066c:	2202      	movs	r2, #2
 800066e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000672:	2202      	movs	r2, #2
 8000674:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800069c:	f001 ff68 	bl	8002570 <HAL_PCD_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f897 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000280 	.word	0x20000280

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	4b40      	ldr	r3, [pc, #256]	; (80007cc <MX_GPIO_Init+0x118>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a3f      	ldr	r2, [pc, #252]	; (80007cc <MX_GPIO_Init+0x118>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <MX_GPIO_Init+0x118>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <MX_GPIO_Init+0x118>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a39      	ldr	r2, [pc, #228]	; (80007cc <MX_GPIO_Init+0x118>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b37      	ldr	r3, [pc, #220]	; (80007cc <MX_GPIO_Init+0x118>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b34      	ldr	r3, [pc, #208]	; (80007cc <MX_GPIO_Init+0x118>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a33      	ldr	r2, [pc, #204]	; (80007cc <MX_GPIO_Init+0x118>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b31      	ldr	r3, [pc, #196]	; (80007cc <MX_GPIO_Init+0x118>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <MX_GPIO_Init+0x118>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a2d      	ldr	r2, [pc, #180]	; (80007cc <MX_GPIO_Init+0x118>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_GPIO_Init+0x118>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0x118>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a27      	ldr	r2, [pc, #156]	; (80007cc <MX_GPIO_Init+0x118>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_GPIO_Init+0x118>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TEST_OUTPUT_Pin|RF_RESET_Pin|PYRO1_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2132      	movs	r1, #50	; 0x32
 8000746:	4822      	ldr	r0, [pc, #136]	; (80007d0 <MX_GPIO_Init+0x11c>)
 8000748:	f001 fdd4 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2107      	movs	r1, #7
 8000750:	4820      	ldr	r0, [pc, #128]	; (80007d4 <MX_GPIO_Init+0x120>)
 8000752:	f001 fdcf 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEST_OUTPUT_Pin RF_RESET_Pin PYRO1_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin|RF_RESET_Pin|PYRO1_Pin;
 8000756:	2332      	movs	r3, #50	; 0x32
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800075e:	2302      	movs	r3, #2
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4818      	ldr	r0, [pc, #96]	; (80007d0 <MX_GPIO_Init+0x11c>)
 800076e:	f001 fbff 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8000772:	2307      	movs	r3, #7
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800077a:	2302      	movs	r3, #2
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0x120>)
 800078a:	f001 fbf1 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC1_DET_Pin */
  GPIO_InitStruct.Pin = SDMMC1_DET_Pin;
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC1_DET_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0x11c>)
 80007a2:	f001 fbe5 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_DIO0_Pin RF_DIO1_Pin RF_DIO5_Pin */
  GPIO_InitStruct.Pin = RF_DIO0_Pin|RF_DIO1_Pin|RF_DIO5_Pin;
 80007a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f001 fbd7 	bl	8001f70 <HAL_GPIO_Init>

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000800 	.word	0x48000800
 80007d4:	48000400 	.word	0x48000400

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6613      	str	r3, [r2, #96]	; 0x60
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6593      	str	r3, [r2, #88]	; 0x58
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <HAL_ADC_MspInit+0x74>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d124      	bne.n	8000898 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_ADC_MspInit+0x78>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <HAL_ADC_MspInit+0x78>)
 8000854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_ADC_MspInit+0x78>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_ADC_MspInit+0x78>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_ADC_MspInit+0x78>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_ADC_MspInit+0x78>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = PYRO1_DET_Pin|PYRO2_DET_Pin|PYRO3_DET_Pin|PYRO4_DET_Pin;
 800087e:	230f      	movs	r3, #15
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000882:	230b      	movs	r3, #11
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f001 fb6c 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	50040000 	.word	0x50040000
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0ae      	sub	sp, #184	; 0xb8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	2288      	movs	r2, #136	; 0x88
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 fddf 	bl	800748c <memset>
  if(hi2c->Instance==I2C1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a42      	ldr	r2, [pc, #264]	; (80009dc <HAL_I2C_MspInit+0x134>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d13b      	bne.n	8000950 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008d8:	2340      	movs	r3, #64	; 0x40
 80008da:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008dc:	2300      	movs	r3, #0
 80008de:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fdff 	bl	80034e8 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008f0:	f7ff ff72 	bl	80007d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	4a39      	ldr	r2, [pc, #228]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 80008fa:	f043 0302 	orr.w	r3, r3, #2
 80008fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000900:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	f003 0302 	and.w	r3, r3, #2
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800090c:	23c0      	movs	r3, #192	; 0xc0
 800090e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000912:	2312      	movs	r3, #18
 8000914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000924:	2304      	movs	r3, #4
 8000926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800092e:	4619      	mov	r1, r3
 8000930:	482c      	ldr	r0, [pc, #176]	; (80009e4 <HAL_I2C_MspInit+0x13c>)
 8000932:	f001 fb1d 	bl	8001f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a29      	ldr	r2, [pc, #164]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 800093c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800094e:	e040      	b.n	80009d2 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <HAL_I2C_MspInit+0x140>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d13b      	bne.n	80009d2 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800095e:	2300      	movs	r3, #0
 8000960:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4618      	mov	r0, r3
 8000968:	f002 fdbe 	bl	80034e8 <HAL_RCCEx_PeriphCLKConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000972:	f7ff ff31 	bl	80007d8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800098e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000996:	2312      	movs	r3, #18
 8000998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009a8:	2304      	movs	r3, #4
 80009aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009b2:	4619      	mov	r1, r3
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <HAL_I2C_MspInit+0x13c>)
 80009b6:	f001 fadb 	bl	8001f70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 80009c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_I2C_MspInit+0x138>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
}
 80009d2:	bf00      	nop
 80009d4:	37b8      	adds	r7, #184	; 0xb8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40005400 	.word	0x40005400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000400 	.word	0x48000400
 80009e8:	40005800 	.word	0x40005800

080009ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <HAL_SD_MspInit+0xb4>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d144      	bne.n	8000a98 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000a0e:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <HAL_SD_MspInit+0xb8>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	4a24      	ldr	r2, [pc, #144]	; (8000aa4 <HAL_SD_MspInit+0xb8>)
 8000a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a18:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <HAL_SD_MspInit+0xb8>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <HAL_SD_MspInit+0xb8>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <HAL_SD_MspInit+0xb8>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_SD_MspInit+0xb8>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_SD_MspInit+0xb8>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <HAL_SD_MspInit+0xb8>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_SD_MspInit+0xb8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a56:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a5a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <HAL_SD_MspInit+0xbc>)
 8000a74:	f001 fa7c 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a88:	230c      	movs	r3, #12
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <HAL_SD_MspInit+0xc0>)
 8000a94:	f001 fa6c 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40012800 	.word	0x40012800
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000800 	.word	0x48000800
 8000aac:	48000c00 	.word	0x48000c00

08000ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <HAL_SPI_MspInit+0xdc>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d129      	bne.n	8000b26 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad6:	4a2e      	ldr	r2, [pc, #184]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000ad8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000adc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ade:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b02:	23f0      	movs	r3, #240	; 0xf0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b12:	2305      	movs	r3, #5
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f001 fa26 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b24:	e02d      	b.n	8000b82 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_SPI_MspInit+0xe4>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d128      	bne.n	8000b82 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b34:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_SPI_MspInit+0xe0>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b60:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b72:	2305      	movs	r3, #5
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <HAL_SPI_MspInit+0xe8>)
 8000b7e:	f001 f9f7 	bl	8001f70 <HAL_GPIO_Init>
}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40003800 	.word	0x40003800
 8000b98:	48000400 	.word	0x48000400

08000b9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bbc:	d146      	bne.n	8000c4c <HAL_PCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|USB_OTG_FS_DP_Pin;
 8000bd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000be8:	230a      	movs	r3, #10
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f001 f9bb 	bl	8001f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d114      	bne.n	8000c48 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000c36:	f001 fe47 	bl	80028c8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <HAL_PCD_MspInit+0xb8>)
 8000c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c46:	e001      	b.n	8000c4c <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 8000c48:	f001 fe3e 	bl	80028c8 <HAL_PWREx_EnableVddUSB>
}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f892 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f006 fba1 	bl	8007444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d02:	f7ff fa61 	bl	80001c8 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d14:	08007518 	.word	0x08007518
  ldr r2, =_sbss
 8000d18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d1c:	200007a4 	.word	0x200007a4

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>

08000d22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f001 f8eb 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f80e 	bl	8000d54 <HAL_InitTick>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	e001      	b.n	8000d48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d44:	f7ff fd4e 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d023      	beq.n	8000db0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_InitTick+0x70>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_InitTick+0x6c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 f8e9 	bl	8001f56 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d809      	bhi.n	8000da4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f001 f8c1 	bl	8001f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_InitTick+0x74>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e007      	b.n	8000db4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e004      	b.n	8000db4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e001      	b.n	8000db4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	2000078c 	.word	0x2000078c

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	2000078c 	.word	0x2000078c

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	609a      	str	r2, [r3, #8]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3360      	adds	r3, #96	; 0x60
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <LL_ADC_SetOffset+0x44>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	4313      	orrs	r3, r2
 8000eec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ef4:	bf00      	nop
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	03fff000 	.word	0x03fff000

08000f04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3360      	adds	r3, #96	; 0x60
 8000f12:	461a      	mov	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3360      	adds	r3, #96	; 0x60
 8000f40:	461a      	mov	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f5a:	bf00      	nop
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b087      	sub	sp, #28
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3330      	adds	r3, #48	; 0x30
 8000f76:	461a      	mov	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	211f      	movs	r1, #31
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	401a      	ands	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0e9b      	lsrs	r3, r3, #26
 8000f9e:	f003 011f 	and.w	r1, r3, #31
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	431a      	orrs	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fb2:	bf00      	nop
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b087      	sub	sp, #28
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3314      	adds	r3, #20
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	0e5b      	lsrs	r3, r3, #25
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	4413      	add	r3, r2
 8000fdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	0d1b      	lsrs	r3, r3, #20
 8000fe6:	f003 031f 	and.w	r3, r3, #31
 8000fea:	2107      	movs	r1, #7
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	0d1b      	lsrs	r3, r3, #20
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	431a      	orrs	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001008:	bf00      	nop
 800100a:	371c      	adds	r7, #28
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0318 	and.w	r3, r3, #24
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001038:	40d9      	lsrs	r1, r3
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	400b      	ands	r3, r1
 800103e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001042:	431a      	orrs	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	0007ffff 	.word	0x0007ffff

0800105c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800106c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6093      	str	r3, [r2, #8]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001094:	d101      	bne.n	800109a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010e4:	d101      	bne.n	80010ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <LL_ADC_IsEnabled+0x18>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <LL_ADC_IsEnabled+0x1a>
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b04      	cmp	r3, #4
 8001130:	d101      	bne.n	8001136 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b08      	cmp	r3, #8
 8001156:	d101      	bne.n	800115c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e136      	b.n	80013f4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff fb49 	bl	800082c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff67 	bl	8001080 <LL_ADC_IsDeepPowerDownEnabled>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff4d 	bl	800105c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff82 	bl	80010d0 <LL_ADC_IsInternalRegulatorEnabled>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d115      	bne.n	80011fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff66 	bl	80010a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011dc:	4b87      	ldr	r3, [pc, #540]	; (80013fc <HAL_ADC_Init+0x290>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	4a87      	ldr	r2, [pc, #540]	; (8001400 <HAL_ADC_Init+0x294>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	099b      	lsrs	r3, r3, #6
 80011ea:	3301      	adds	r3, #1
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011f0:	e002      	b.n	80011f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f9      	bne.n	80011f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff64 	bl	80010d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001212:	f043 0210 	orr.w	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	f043 0201 	orr.w	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff75 	bl	800111e <LL_ADC_REG_IsConversionOngoing>
 8001234:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	f040 80cf 	bne.w	80013e2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f040 80cb 	bne.w	80013e2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001250:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001254:	f043 0202 	orr.w	r2, r3, #2
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff49 	bl	80010f8 <LL_ADC_IsEnabled>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d115      	bne.n	8001298 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800126c:	4865      	ldr	r0, [pc, #404]	; (8001404 <HAL_ADC_Init+0x298>)
 800126e:	f7ff ff43 	bl	80010f8 <LL_ADC_IsEnabled>
 8001272:	4604      	mov	r4, r0
 8001274:	4864      	ldr	r0, [pc, #400]	; (8001408 <HAL_ADC_Init+0x29c>)
 8001276:	f7ff ff3f 	bl	80010f8 <LL_ADC_IsEnabled>
 800127a:	4603      	mov	r3, r0
 800127c:	431c      	orrs	r4, r3
 800127e:	4863      	ldr	r0, [pc, #396]	; (800140c <HAL_ADC_Init+0x2a0>)
 8001280:	f7ff ff3a 	bl	80010f8 <LL_ADC_IsEnabled>
 8001284:	4603      	mov	r3, r0
 8001286:	4323      	orrs	r3, r4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4619      	mov	r1, r3
 8001292:	485f      	ldr	r0, [pc, #380]	; (8001410 <HAL_ADC_Init+0x2a4>)
 8001294:	f7ff fdde 	bl	8000e54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7e5b      	ldrb	r3, [r3, #25]
 800129c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d106      	bne.n	80012d4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	3b01      	subs	r3, #1
 80012cc:	045b      	lsls	r3, r3, #17
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_ADC_Init+0x2a8>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	69b9      	ldr	r1, [r7, #24]
 8001300:	430b      	orrs	r3, r1
 8001302:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff08 	bl	800111e <LL_ADC_REG_IsConversionOngoing>
 800130e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff15 	bl	8001144 <LL_ADC_INJ_IsConversionOngoing>
 800131a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d13d      	bne.n	800139e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d13a      	bne.n	800139e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800132c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001334:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001344:	f023 0302 	bic.w	r3, r3, #2
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	69b9      	ldr	r1, [r7, #24]
 800134e:	430b      	orrs	r3, r1
 8001350:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001358:	2b01      	cmp	r3, #1
 800135a:	d118      	bne.n	800138e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001372:	4311      	orrs	r1, r2
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001378:	4311      	orrs	r1, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800137e:	430a      	orrs	r2, r1
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0201 	orr.w	r2, r2, #1
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	e007      	b.n	800139e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d10c      	bne.n	80013c0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f023 010f 	bic.w	r1, r3, #15
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30
 80013be:	e007      	b.n	80013d0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 020f 	bic.w	r2, r2, #15
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	f023 0303 	bic.w	r3, r3, #3
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	655a      	str	r2, [r3, #84]	; 0x54
 80013e0:	e007      	b.n	80013f2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e6:	f043 0210 	orr.w	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3724      	adds	r7, #36	; 0x24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	053e2d63 	.word	0x053e2d63
 8001404:	50040000 	.word	0x50040000
 8001408:	50040100 	.word	0x50040100
 800140c:	50040200 	.word	0x50040200
 8001410:	50040300 	.word	0x50040300
 8001414:	fff0c007 	.word	0xfff0c007

08001418 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0b6      	sub	sp, #216	; 0xd8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_ADC_ConfigChannel+0x22>
 8001436:	2302      	movs	r3, #2
 8001438:	e3c7      	b.n	8001bca <HAL_ADC_ConfigChannel+0x7b2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fe69 	bl	800111e <LL_ADC_REG_IsConversionOngoing>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 83a8 	bne.w	8001ba4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b05      	cmp	r3, #5
 800145a:	d824      	bhi.n	80014a6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	3b02      	subs	r3, #2
 8001462:	2b03      	cmp	r3, #3
 8001464:	d81b      	bhi.n	800149e <HAL_ADC_ConfigChannel+0x86>
 8001466:	a201      	add	r2, pc, #4	; (adr r2, 800146c <HAL_ADC_ConfigChannel+0x54>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	0800147d 	.word	0x0800147d
 8001470:	08001485 	.word	0x08001485
 8001474:	0800148d 	.word	0x0800148d
 8001478:	08001495 	.word	0x08001495
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	220c      	movs	r2, #12
 8001480:	605a      	str	r2, [r3, #4]
          break;
 8001482:	e011      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2212      	movs	r2, #18
 8001488:	605a      	str	r2, [r3, #4]
          break;
 800148a:	e00d      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2218      	movs	r2, #24
 8001490:	605a      	str	r2, [r3, #4]
          break;
 8001492:	e009      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149a:	605a      	str	r2, [r3, #4]
          break;
 800149c:	e004      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2206      	movs	r2, #6
 80014a2:	605a      	str	r2, [r3, #4]
          break;
 80014a4:	e000      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80014a6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	f7ff fd56 	bl	8000f66 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe2d 	bl	800111e <LL_ADC_REG_IsConversionOngoing>
 80014c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe39 	bl	8001144 <LL_ADC_INJ_IsConversionOngoing>
 80014d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 81a6 	bne.w	800182c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f040 81a1 	bne.w	800182c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f7ff fd61 	bl	8000fbe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	08db      	lsrs	r3, r3, #3
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b04      	cmp	r3, #4
 800151c:	d00a      	beq.n	8001534 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	6919      	ldr	r1, [r3, #16]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800152e:	f7ff fcc5 	bl	8000ebc <LL_ADC_SetOffset>
 8001532:	e17b      	b.n	800182c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fce2 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10a      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x148>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fcd7 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	0e9b      	lsrs	r3, r3, #26
 800155a:	f003 021f 	and.w	r2, r3, #31
 800155e:	e01e      	b.n	800159e <HAL_ADC_ConfigChannel+0x186>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fccc 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800157e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800158e:	2320      	movs	r3, #32
 8001590:	e004      	b.n	800159c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d105      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x19e>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	0e9b      	lsrs	r3, r3, #26
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	e018      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1d0>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80015ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80015d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80015da:	2320      	movs	r3, #32
 80015dc:	e004      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80015de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d106      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fc9b 	bl	8000f30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2101      	movs	r1, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fc7f 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10a      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x20e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fc74 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	0e9b      	lsrs	r3, r3, #26
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	e01e      	b.n	8001664 <HAL_ADC_ConfigChannel+0x24c>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2101      	movs	r1, #1
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fc69 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001644:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800164c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001654:	2320      	movs	r3, #32
 8001656:	e004      	b.n	8001662 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <HAL_ADC_ConfigChannel+0x264>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0e9b      	lsrs	r3, r3, #26
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	e018      	b.n	80016ae <HAL_ADC_ConfigChannel+0x296>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001690:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80016a0:	2320      	movs	r3, #32
 80016a2:	e004      	b.n	80016ae <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80016a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d106      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fc38 	bl	8000f30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2102      	movs	r1, #2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fc1c 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10a      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x2d4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2102      	movs	r1, #2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fc11 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	0e9b      	lsrs	r3, r3, #26
 80016e6:	f003 021f 	and.w	r2, r3, #31
 80016ea:	e01e      	b.n	800172a <HAL_ADC_ConfigChannel+0x312>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2102      	movs	r1, #2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fc06 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800170a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800170e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800171a:	2320      	movs	r3, #32
 800171c:	e004      	b.n	8001728 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800171e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x32a>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0e9b      	lsrs	r3, r3, #26
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	e016      	b.n	8001770 <HAL_ADC_ConfigChannel+0x358>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800175a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001762:	2320      	movs	r3, #32
 8001764:	e004      	b.n	8001770 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001770:	429a      	cmp	r2, r3
 8001772:	d106      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2200      	movs	r2, #0
 800177a:	2102      	movs	r1, #2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fbd7 	bl	8000f30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2103      	movs	r1, #3
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fbbb 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10a      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x396>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2103      	movs	r1, #3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fbb0 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	0e9b      	lsrs	r3, r3, #26
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	e017      	b.n	80017de <HAL_ADC_ConfigChannel+0x3c6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2103      	movs	r1, #3
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fba5 	bl	8000f04 <LL_ADC_GetOffsetChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80017c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80017ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80017d0:	2320      	movs	r3, #32
 80017d2:	e003      	b.n	80017dc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80017d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x3de>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0e9b      	lsrs	r3, r3, #26
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	e011      	b.n	800181a <HAL_ADC_ConfigChannel+0x402>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001806:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800180e:	2320      	movs	r3, #32
 8001810:	e003      	b.n	800181a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800181a:	429a      	cmp	r2, r3
 800181c:	d106      	bne.n	800182c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	2103      	movs	r1, #3
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fb82 	bl	8000f30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fc61 	bl	80010f8 <LL_ADC_IsEnabled>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	f040 813f 	bne.w	8001abc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	461a      	mov	r2, r3
 800184c:	f7ff fbe2 	bl	8001014 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a8e      	ldr	r2, [pc, #568]	; (8001a90 <HAL_ADC_ConfigChannel+0x678>)
 8001856:	4293      	cmp	r3, r2
 8001858:	f040 8130 	bne.w	8001abc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10b      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x46c>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0e9b      	lsrs	r3, r3, #26
 8001872:	3301      	adds	r3, #1
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2b09      	cmp	r3, #9
 800187a:	bf94      	ite	ls
 800187c:	2301      	movls	r3, #1
 800187e:	2300      	movhi	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	e019      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x4a0>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001894:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800189c:	2320      	movs	r3, #32
 800189e:	e003      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80018a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	bf94      	ite	ls
 80018b2:	2301      	movls	r3, #1
 80018b4:	2300      	movhi	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d079      	beq.n	80019b0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x4c0>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0e9b      	lsrs	r3, r3, #26
 80018ce:	3301      	adds	r3, #1
 80018d0:	069b      	lsls	r3, r3, #26
 80018d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018d6:	e015      	b.n	8001904 <HAL_ADC_ConfigChannel+0x4ec>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80018ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80018f0:	2320      	movs	r3, #32
 80018f2:	e003      	b.n	80018fc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80018f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	069b      	lsls	r3, r3, #26
 8001900:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x50c>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0e9b      	lsrs	r3, r3, #26
 8001916:	3301      	adds	r3, #1
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	e017      	b.n	8001954 <HAL_ADC_ConfigChannel+0x53c>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800193c:	2320      	movs	r3, #32
 800193e:	e003      	b.n	8001948 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	3301      	adds	r3, #1
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	ea42 0103 	orr.w	r1, r2, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10a      	bne.n	800197a <HAL_ADC_ConfigChannel+0x562>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0e9b      	lsrs	r3, r3, #26
 800196a:	3301      	adds	r3, #1
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	051b      	lsls	r3, r3, #20
 8001978:	e018      	b.n	80019ac <HAL_ADC_ConfigChannel+0x594>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800198c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001992:	2320      	movs	r3, #32
 8001994:	e003      	b.n	800199e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019ac:	430b      	orrs	r3, r1
 80019ae:	e080      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d107      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x5b4>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	3301      	adds	r3, #1
 80019c4:	069b      	lsls	r3, r3, #26
 80019c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ca:	e015      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x5e0>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80019de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80019e4:	2320      	movs	r3, #32
 80019e6:	e003      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	069b      	lsls	r3, r3, #26
 80019f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x600>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	e017      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x630>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	61fb      	str	r3, [r7, #28]
  return result;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001a30:	2320      	movs	r3, #32
 8001a32:	e003      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	ea42 0103 	orr.w	r1, r2, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10d      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x65c>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0e9b      	lsrs	r3, r3, #26
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b1e      	subs	r3, #30
 8001a6c:	051b      	lsls	r3, r3, #20
 8001a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a72:	e01d      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x698>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	613b      	str	r3, [r7, #16]
  return result;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d103      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	e005      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x684>
 8001a90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f003 021f 	and.w	r2, r3, #31
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b1e      	subs	r3, #30
 8001aaa:	051b      	lsls	r3, r3, #20
 8001aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	6892      	ldr	r2, [r2, #8]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff fa81 	bl	8000fbe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d07a      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ac8:	4843      	ldr	r0, [pc, #268]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001aca:	f7ff f9e9 	bl	8000ea0 <LL_ADC_GetCommonPathInternalCh>
 8001ace:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a41      	ldr	r2, [pc, #260]	; (8001bdc <HAL_ADC_ConfigChannel+0x7c4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d12c      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d126      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a3c      	ldr	r2, [pc, #240]	; (8001be0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_ADC_ConfigChannel+0x6e4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a3b      	ldr	r2, [pc, #236]	; (8001be4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d15d      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b04:	4619      	mov	r1, r3
 8001b06:	4834      	ldr	r0, [pc, #208]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b08:	f7ff f9b7 	bl	8000e7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	4a36      	ldr	r2, [pc, #216]	; (8001bec <HAL_ADC_ConfigChannel+0x7d4>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b26:	e002      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f9      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b34:	e040      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d118      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x75a>
 8001b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d112      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x748>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d12d      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b6c:	f7ff f985 	bl	8000e7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b70:	e024      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d120      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d11a      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d115      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b9e:	f7ff f96c 	bl	8000e7a <LL_ADC_SetCommonPathInternalCh>
 8001ba2:	e00c      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	f043 0220 	orr.w	r2, r3, #32
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001bb6:	e002      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bb8:	bf00      	nop
 8001bba:	e000      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	37d8      	adds	r7, #216	; 0xd8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	80080000 	.word	0x80080000
 8001bd8:	50040300 	.word	0x50040300
 8001bdc:	c7520000 	.word	0xc7520000
 8001be0:	50040000 	.word	0x50040000
 8001be4:	50040200 	.word	0x50040200
 8001be8:	20000000 	.word	0x20000000
 8001bec:	053e2d63 	.word	0x053e2d63
 8001bf0:	cb840000 	.word	0xcb840000
 8001bf4:	80000001 	.word	0x80000001

08001bf8 <LL_ADC_IsEnabled>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <LL_ADC_IsEnabled+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_ADC_IsEnabled+0x1a>
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_ADC_REG_IsConversionOngoing>:
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b09f      	sub	sp, #124	; 0x7c
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e093      	b.n	8001d8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a47      	ldr	r2, [pc, #284]	; (8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d102      	bne.n	8001c82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c7c:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	e001      	b.n	8001c86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f043 0220 	orr.w	r2, r3, #32
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e072      	b.n	8001d8a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ffb9 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001cac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ffb3 	bl	8001c1e <LL_ADC_REG_IsConversionOngoing>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d154      	bne.n	8001d68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d151      	bne.n	8001d68 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001cc4:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001cc6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d02c      	beq.n	8001d2a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6859      	ldr	r1, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ce2:	035b      	lsls	r3, r3, #13
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cec:	4829      	ldr	r0, [pc, #164]	; (8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001cee:	f7ff ff83 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	4828      	ldr	r0, [pc, #160]	; (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001cf6:	f7ff ff7f 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	431c      	orrs	r4, r3
 8001cfe:	4828      	ldr	r0, [pc, #160]	; (8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d00:	f7ff ff7a 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4323      	orrs	r3, r4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d137      	bne.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d14:	f023 030f 	bic.w	r3, r3, #15
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	6811      	ldr	r1, [r2, #0]
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	6892      	ldr	r2, [r2, #8]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	431a      	orrs	r2, r3
 8001d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d26:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d28:	e028      	b.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d36:	4817      	ldr	r0, [pc, #92]	; (8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d38:	f7ff ff5e 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	4816      	ldr	r0, [pc, #88]	; (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d40:	f7ff ff5a 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	431c      	orrs	r4, r3
 8001d48:	4815      	ldr	r0, [pc, #84]	; (8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d4a:	f7ff ff55 	bl	8001bf8 <LL_ADC_IsEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4323      	orrs	r3, r4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d112      	bne.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d5e:	f023 030f 	bic.w	r3, r3, #15
 8001d62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d64:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d66:	e009      	b.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d7a:	e000      	b.n	8001d7e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	377c      	adds	r7, #124	; 0x7c
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd90      	pop	{r4, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	50040000 	.word	0x50040000
 8001d98:	50040100 	.word	0x50040100
 8001d9c:	50040300 	.word	0x50040300
 8001da0:	50040200 	.word	0x50040200

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	; (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	; (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ff8e 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff47 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff5c 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff8e 	bl	8001e5c <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5d 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffb0 	bl	8001ec4 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	e17f      	b.n	8002280 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8171 	beq.w	800227a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d005      	beq.n	8001fb0 <HAL_GPIO_Init+0x40>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d130      	bne.n	8002012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 0201 	and.w	r2, r3, #1
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b03      	cmp	r3, #3
 800201c:	d118      	bne.n	8002050 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	08db      	lsrs	r3, r3, #3
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b03      	cmp	r3, #3
 800205a:	d017      	beq.n	800208c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d123      	bne.n	80020e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	6939      	ldr	r1, [r7, #16]
 80020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80ac 	beq.w	800227a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_GPIO_Init+0x330>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	4a5e      	ldr	r2, [pc, #376]	; (80022a0 <HAL_GPIO_Init+0x330>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6613      	str	r3, [r2, #96]	; 0x60
 800212e:	4b5c      	ldr	r3, [pc, #368]	; (80022a0 <HAL_GPIO_Init+0x330>)
 8002130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213a:	4a5a      	ldr	r2, [pc, #360]	; (80022a4 <HAL_GPIO_Init+0x334>)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	3302      	adds	r3, #2
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_Init+0x242>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4f      	ldr	r2, [pc, #316]	; (80022a8 <HAL_GPIO_Init+0x338>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x23e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4e      	ldr	r2, [pc, #312]	; (80022ac <HAL_GPIO_Init+0x33c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x23a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4d      	ldr	r2, [pc, #308]	; (80022b0 <HAL_GPIO_Init+0x340>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x236>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4c      	ldr	r2, [pc, #304]	; (80022b4 <HAL_GPIO_Init+0x344>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x232>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4b      	ldr	r2, [pc, #300]	; (80022b8 <HAL_GPIO_Init+0x348>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x22e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4a      	ldr	r2, [pc, #296]	; (80022bc <HAL_GPIO_Init+0x34c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x22a>
 8002196:	2306      	movs	r3, #6
 8002198:	e00c      	b.n	80021b4 <HAL_GPIO_Init+0x244>
 800219a:	2307      	movs	r3, #7
 800219c:	e00a      	b.n	80021b4 <HAL_GPIO_Init+0x244>
 800219e:	2305      	movs	r3, #5
 80021a0:	e008      	b.n	80021b4 <HAL_GPIO_Init+0x244>
 80021a2:	2304      	movs	r3, #4
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x244>
 80021a6:	2303      	movs	r3, #3
 80021a8:	e004      	b.n	80021b4 <HAL_GPIO_Init+0x244>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_Init+0x244>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x244>
 80021b2:	2300      	movs	r3, #0
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4093      	lsls	r3, r2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c4:	4937      	ldr	r1, [pc, #220]	; (80022a4 <HAL_GPIO_Init+0x334>)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_GPIO_Init+0x350>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021f6:	4a32      	ldr	r2, [pc, #200]	; (80022c0 <HAL_GPIO_Init+0x350>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021fc:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <HAL_GPIO_Init+0x350>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_GPIO_Init+0x350>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_GPIO_Init+0x350>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_GPIO_Init+0x350>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_GPIO_Init+0x350>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_GPIO_Init+0x350>)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	f47f ae78 	bne.w	8001f80 <HAL_GPIO_Init+0x10>
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000
 80022a8:	48000400 	.word	0x48000400
 80022ac:	48000800 	.word	0x48000800
 80022b0:	48000c00 	.word	0x48000c00
 80022b4:	48001000 	.word	0x48001000
 80022b8:	48001400 	.word	0x48001400
 80022bc:	48001800 	.word	0x48001800
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e001      	b.n	80022e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002310:	e002      	b.n	8002318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e081      	b.n	800243a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe faac 	bl	80008a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002374:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002384:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	e006      	b.n	80023ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d104      	bne.n	80023be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69d9      	ldr	r1, [r3, #28]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b20      	cmp	r3, #32
 8002456:	d138      	bne.n	80024ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002462:	2302      	movs	r3, #2
 8002464:	e032      	b.n	80024cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2224      	movs	r2, #36	; 0x24
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002494:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6819      	ldr	r1, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
  }
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d139      	bne.n	8002562 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e033      	b.n	8002564 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	; 0x24
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800252a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002562:	2302      	movs	r3, #2
  }
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	b08f      	sub	sp, #60	; 0x3c
 8002574:	af0a      	add	r7, sp, #40	; 0x28
 8002576:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e116      	b.n	80027b0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7fe fafd 	bl	8000b9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2203      	movs	r2, #3
 80025a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d102      	bne.n	80025bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f004 fabb 	bl	8006b3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	687e      	ldr	r6, [r7, #4]
 80025ce:	466d      	mov	r5, sp
 80025d0:	f106 0410 	add.w	r4, r6, #16
 80025d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80025e4:	1d33      	adds	r3, r6, #4
 80025e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e8:	6838      	ldr	r0, [r7, #0]
 80025ea:	f004 fa7b 	bl	8006ae4 <USB_CoreInit>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0d7      	b.n	80027b0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f004 faa9 	bl	8006b5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	e04a      	b.n	80026a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	333d      	adds	r3, #61	; 0x3d
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	333c      	adds	r3, #60	; 0x3c
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	b298      	uxth	r0, r3
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3344      	adds	r3, #68	; 0x44
 800264e:	4602      	mov	r2, r0
 8002650:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	3340      	adds	r3, #64	; 0x40
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	3348      	adds	r3, #72	; 0x48
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	334c      	adds	r3, #76	; 0x4c
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	3354      	adds	r3, #84	; 0x54
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	3301      	adds	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d3af      	bcc.n	8002612 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	e044      	b.n	8002742 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	3301      	adds	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	d3b5      	bcc.n	80026b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	687e      	ldr	r6, [r7, #4]
 8002754:	466d      	mov	r5, sp
 8002756:	f106 0410 	add.w	r4, r6, #16
 800275a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002762:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002766:	e885 0003 	stmia.w	r5, {r0, r1}
 800276a:	1d33      	adds	r3, r6, #4
 800276c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800276e:	6838      	ldr	r0, [r7, #0]
 8002770:	f004 fa42 	bl	8006bf8 <USB_DevInit>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2202      	movs	r2, #2
 800277e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e014      	b.n	80027b0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	2b01      	cmp	r3, #1
 800279c:	d102      	bne.n	80027a4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f80a 	bl	80027b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 fbee 	bl	8006f8a <USB_DevDisconnect>

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	f043 0303 	orr.w	r3, r3, #3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_PWREx_GetVoltageRange+0x18>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40007000 	.word	0x40007000

0800281c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282a:	d130      	bne.n	800288e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002838:	d038      	beq.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2232      	movs	r2, #50	; 0x32
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9b      	lsrs	r3, r3, #18
 800285c:	3301      	adds	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002860:	e002      	b.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3b01      	subs	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002874:	d102      	bne.n	800287c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f2      	bne.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002888:	d110      	bne.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e00f      	b.n	80028ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d007      	beq.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028a4:	4a05      	ldr	r2, [pc, #20]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40007000 	.word	0x40007000
 80028c0:	20000000 	.word	0x20000000
 80028c4:	431bde83 	.word	0x431bde83

080028c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d6:	6053      	str	r3, [r2, #4]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40007000 	.word	0x40007000

080028e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e3ca      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028fa:	4b97      	ldr	r3, [pc, #604]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002904:	4b94      	ldr	r3, [pc, #592]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80e4 	beq.w	8002ae4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_RCC_OscConfig+0x4a>
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b0c      	cmp	r3, #12
 8002926:	f040 808b 	bne.w	8002a40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b01      	cmp	r3, #1
 800292e:	f040 8087 	bne.w	8002a40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002932:	4b89      	ldr	r3, [pc, #548]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x62>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e3a2      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	4b82      	ldr	r3, [pc, #520]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d004      	beq.n	8002964 <HAL_RCC_OscConfig+0x7c>
 800295a:	4b7f      	ldr	r3, [pc, #508]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002962:	e005      	b.n	8002970 <HAL_RCC_OscConfig+0x88>
 8002964:	4b7c      	ldr	r3, [pc, #496]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002970:	4293      	cmp	r3, r2
 8002972:	d223      	bcs.n	80029bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fd55 	bl	8003428 <RCC_SetFlashLatencyFromMSIRange>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e383      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002988:	4b73      	ldr	r3, [pc, #460]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a72      	ldr	r2, [pc, #456]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 800298e:	f043 0308 	orr.w	r3, r3, #8
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b70      	ldr	r3, [pc, #448]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	496d      	ldr	r1, [pc, #436]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a6:	4b6c      	ldr	r3, [pc, #432]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	4968      	ldr	r1, [pc, #416]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
 80029ba:	e025      	b.n	8002a08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029bc:	4b66      	ldr	r3, [pc, #408]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a65      	ldr	r2, [pc, #404]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 80029c2:	f043 0308 	orr.w	r3, r3, #8
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4960      	ldr	r1, [pc, #384]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029da:	4b5f      	ldr	r3, [pc, #380]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	495b      	ldr	r1, [pc, #364]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fd15 	bl	8003428 <RCC_SetFlashLatencyFromMSIRange>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e343      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a08:	f000 fc4a 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b52      	ldr	r3, [pc, #328]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	4950      	ldr	r1, [pc, #320]	; (8002b5c <HAL_RCC_OscConfig+0x274>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
 8002a24:	4a4e      	ldr	r2, [pc, #312]	; (8002b60 <HAL_RCC_OscConfig+0x278>)
 8002a26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a28:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <HAL_RCC_OscConfig+0x27c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe f991 	bl	8000d54 <HAL_InitTick>
 8002a32:	4603      	mov	r3, r0
 8002a34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d052      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	e327      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d032      	beq.n	8002aae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a48:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a42      	ldr	r2, [pc, #264]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a54:	f7fe f9ce 	bl	8000df4 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a5c:	f7fe f9ca 	bl	8000df4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e310      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a36      	ldr	r2, [pc, #216]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4931      	ldr	r1, [pc, #196]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a98:	4b2f      	ldr	r3, [pc, #188]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	492c      	ldr	r1, [pc, #176]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
 8002aac:	e01a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a29      	ldr	r2, [pc, #164]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aba:	f7fe f99b 	bl	8000df4 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac2:	f7fe f997 	bl	8000df4 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e2dd      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ad4:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x1da>
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ae2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d074      	beq.n	8002bda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d005      	beq.n	8002b02 <HAL_RCC_OscConfig+0x21a>
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d10e      	bne.n	8002b1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d10b      	bne.n	8002b1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d064      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x2f0>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d160      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e2ba      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x24a>
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e026      	b.n	8002b80 <HAL_RCC_OscConfig+0x298>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3a:	d115      	bne.n	8002b68 <HAL_RCC_OscConfig+0x280>
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a02      	ldr	r2, [pc, #8]	; (8002b58 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	e014      	b.n	8002b80 <HAL_RCC_OscConfig+0x298>
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	080074b4 	.word	0x080074b4
 8002b60:	20000000 	.word	0x20000000
 8002b64:	20000004 	.word	0x20000004
 8002b68:	4ba0      	ldr	r3, [pc, #640]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a9f      	ldr	r2, [pc, #636]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b9d      	ldr	r3, [pc, #628]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a9c      	ldr	r2, [pc, #624]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe f934 	bl	8000df4 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe f930 	bl	8000df4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e276      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba2:	4b92      	ldr	r3, [pc, #584]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x2a8>
 8002bae:	e014      	b.n	8002bda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe f920 	bl	8000df4 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe f91c 	bl	8000df4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e262      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bca:	4b88      	ldr	r3, [pc, #544]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x2d0>
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d060      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x310>
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d119      	bne.n	8002c26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d116      	bne.n	8002c26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf8:	4b7c      	ldr	r3, [pc, #496]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_OscConfig+0x328>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e23f      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c10:	4b76      	ldr	r3, [pc, #472]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	061b      	lsls	r3, r3, #24
 8002c1e:	4973      	ldr	r1, [pc, #460]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c24:	e040      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d023      	beq.n	8002c76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c2e:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6e      	ldr	r2, [pc, #440]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe f8db 	bl	8000df4 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c42:	f7fe f8d7 	bl	8000df4 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e21d      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c54:	4b65      	ldr	r3, [pc, #404]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c60:	4b62      	ldr	r3, [pc, #392]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	061b      	lsls	r3, r3, #24
 8002c6e:	495f      	ldr	r1, [pc, #380]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
 8002c74:	e018      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c76:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a5c      	ldr	r2, [pc, #368]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7fe f8b7 	bl	8000df4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7fe f8b3 	bl	8000df4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1f9      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c9c:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d03c      	beq.n	8002d2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cbc:	4b4b      	ldr	r3, [pc, #300]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc2:	4a4a      	ldr	r2, [pc, #296]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe f892 	bl	8000df4 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7fe f88e 	bl	8000df4 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e1d4      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce6:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0ef      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x3ec>
 8002cf4:	e01b      	b.n	8002d2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfc:	4a3b      	ldr	r2, [pc, #236]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe f875 	bl	8000df4 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0e:	f7fe f871 	bl	8000df4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e1b7      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d20:	4b32      	ldr	r3, [pc, #200]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ef      	bne.n	8002d0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80a6 	beq.w	8002e88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d40:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10d      	bne.n	8002d68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4c:	4b27      	ldr	r3, [pc, #156]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	4a26      	ldr	r2, [pc, #152]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d56:	6593      	str	r3, [r2, #88]	; 0x58
 8002d58:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d64:	2301      	movs	r3, #1
 8002d66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d68:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <HAL_RCC_OscConfig+0x508>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d118      	bne.n	8002da6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_RCC_OscConfig+0x508>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <HAL_RCC_OscConfig+0x508>)
 8002d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d80:	f7fe f838 	bl	8000df4 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7fe f834 	bl	8000df4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e17a      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_RCC_OscConfig+0x508>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d108      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4d8>
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dbe:	e029      	b.n	8002e14 <HAL_RCC_OscConfig+0x52c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d115      	bne.n	8002df4 <HAL_RCC_OscConfig+0x50c>
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	4a07      	ldr	r2, [pc, #28]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	4a03      	ldr	r2, [pc, #12]	; (8002dec <HAL_RCC_OscConfig+0x504>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de8:	e014      	b.n	8002e14 <HAL_RCC_OscConfig+0x52c>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
 8002df4:	4b9c      	ldr	r3, [pc, #624]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	4a9b      	ldr	r2, [pc, #620]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e04:	4b98      	ldr	r3, [pc, #608]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	4a97      	ldr	r2, [pc, #604]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002e0c:	f023 0304 	bic.w	r3, r3, #4
 8002e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d016      	beq.n	8002e4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fd ffea 	bl	8000df4 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e24:	f7fd ffe6 	bl	8000df4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e12a      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3a:	4b8b      	ldr	r3, [pc, #556]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ed      	beq.n	8002e24 <HAL_RCC_OscConfig+0x53c>
 8002e48:	e015      	b.n	8002e76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fd ffd3 	bl	8000df4 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fd ffcf 	bl	8000df4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e113      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e68:	4b7f      	ldr	r3, [pc, #508]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ed      	bne.n	8002e52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e76:	7ffb      	ldrb	r3, [r7, #31]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b7a      	ldr	r3, [pc, #488]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	4a79      	ldr	r2, [pc, #484]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80fe 	beq.w	800308e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	f040 80d0 	bne.w	800303c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e9c:	4b72      	ldr	r3, [pc, #456]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0203 	and.w	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d130      	bne.n	8002f12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d127      	bne.n	8002f12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d11f      	bne.n	8002f12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002edc:	2a07      	cmp	r2, #7
 8002ede:	bf14      	ite	ne
 8002ee0:	2201      	movne	r2, #1
 8002ee2:	2200      	moveq	r2, #0
 8002ee4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d113      	bne.n	8002f12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d06e      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	d069      	beq.n	8002fec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f24:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0ad      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f34:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a4b      	ldr	r2, [pc, #300]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f40:	f7fd ff58 	bl	8000df4 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fd ff54 	bl	8000df4 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e09a      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5a:	4b43      	ldr	r3, [pc, #268]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f66:	4b40      	ldr	r3, [pc, #256]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	4b40      	ldr	r3, [pc, #256]	; (800306c <HAL_RCC_OscConfig+0x784>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f76:	3a01      	subs	r2, #1
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f80:	0212      	lsls	r2, r2, #8
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f88:	0852      	lsrs	r2, r2, #1
 8002f8a:	3a01      	subs	r2, #1
 8002f8c:	0552      	lsls	r2, r2, #21
 8002f8e:	4311      	orrs	r1, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f94:	0852      	lsrs	r2, r2, #1
 8002f96:	3a01      	subs	r2, #1
 8002f98:	0652      	lsls	r2, r2, #25
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fa0:	0912      	lsrs	r2, r2, #4
 8002fa2:	0452      	lsls	r2, r2, #17
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	4930      	ldr	r1, [pc, #192]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fac:	4b2e      	ldr	r3, [pc, #184]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a2a      	ldr	r2, [pc, #168]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fc4:	f7fd ff16 	bl	8000df4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fd ff12 	bl	8000df4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e058      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fea:	e050      	b.n	800308e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e04f      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d148      	bne.n	800308e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a19      	ldr	r2, [pc, #100]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8003002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003006:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a16      	ldr	r2, [pc, #88]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 800300e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003012:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003014:	f7fd feee 	bl	8000df4 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fd feea 	bl	8000df4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e030      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x734>
 800303a:	e028      	b.n	800308e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d023      	beq.n	800308a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a08      	ldr	r2, [pc, #32]	; (8003068 <HAL_RCC_OscConfig+0x780>)
 8003048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fd fed1 	bl	8000df4 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003054:	e00c      	b.n	8003070 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003056:	f7fd fecd 	bl	8000df4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d905      	bls.n	8003070 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e013      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
 8003068:	40021000 	.word	0x40021000
 800306c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_OscConfig+0x7b0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ec      	bne.n	8003056 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_OscConfig+0x7b0>)
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4905      	ldr	r1, [pc, #20]	; (8003098 <HAL_RCC_OscConfig+0x7b0>)
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_OscConfig+0x7b4>)
 8003084:	4013      	ands	r3, r2
 8003086:	60cb      	str	r3, [r1, #12]
 8003088:	e001      	b.n	800308e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	feeefffc 	.word	0xfeeefffc

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0e7      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b75      	ldr	r3, [pc, #468]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d910      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b72      	ldr	r3, [pc, #456]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 0207 	bic.w	r2, r3, #7
 80030ca:	4970      	ldr	r1, [pc, #448]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b6e      	ldr	r3, [pc, #440]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0cf      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	4b66      	ldr	r3, [pc, #408]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d908      	bls.n	8003112 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4960      	ldr	r1, [pc, #384]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d04c      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	4b5a      	ldr	r3, [pc, #360]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d121      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0a6      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	4b54      	ldr	r3, [pc, #336]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d115      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e09a      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003156:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e08e      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003166:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e086      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4943      	ldr	r1, [pc, #268]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003188:	f7fd fe34 	bl	8000df4 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7fd fe30 	bl	8000df4 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e06e      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d010      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d208      	bcs.n	80031e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	492b      	ldr	r1, [pc, #172]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e6:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d210      	bcs.n	8003216 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 0207 	bic.w	r2, r3, #7
 80031fc:	4923      	ldr	r1, [pc, #140]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e036      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4918      	ldr	r1, [pc, #96]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4910      	ldr	r1, [pc, #64]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003254:	f000 f824 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	490b      	ldr	r1, [pc, #44]	; (8003294 <HAL_RCC_ClockConfig+0x1f4>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1f8>)
 8003272:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1fc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd fd6b 	bl	8000d54 <HAL_InitTick>
 800327e:	4603      	mov	r3, r0
 8003280:	72fb      	strb	r3, [r7, #11]

  return status;
 8003282:	7afb      	ldrb	r3, [r7, #11]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40022000 	.word	0x40022000
 8003290:	40021000 	.word	0x40021000
 8003294:	080074b4 	.word	0x080074b4
 8003298:	20000000 	.word	0x20000000
 800329c:	20000004 	.word	0x20000004

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b8:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x34>
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d121      	bne.n	8003312 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d11e      	bne.n	8003312 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032d4:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032e0:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	e005      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032f0:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003304:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d102      	bne.n	800331e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	e004      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d101      	bne.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003324:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003326:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d134      	bne.n	8003398 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800332e:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d003      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0xa6>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d003      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0xac>
 8003344:	e005      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003348:	617b      	str	r3, [r7, #20]
      break;
 800334a:	e005      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800334e:	617b      	str	r3, [r7, #20]
      break;
 8003350:	e002      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	617b      	str	r3, [r7, #20]
      break;
 8003356:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	3301      	adds	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	fb03 f202 	mul.w	r2, r3, r2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	0e5b      	lsrs	r3, r3, #25
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	3301      	adds	r3, #1
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003398:	69bb      	ldr	r3, [r7, #24]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	080074cc 	.word	0x080074cc
 80033b0:	00f42400 	.word	0x00f42400
 80033b4:	02625a00 	.word	0x02625a00

080033b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_RCC_GetHCLKFreq+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000000 	.word	0x20000000

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033d4:	f7ff fff0 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4904      	ldr	r1, [pc, #16]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	080074c4 	.word	0x080074c4

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003400:	f7ff ffda 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0adb      	lsrs	r3, r3, #11
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4904      	ldr	r1, [pc, #16]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	080074c4 	.word	0x080074c4

08003428 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003440:	f7ff f9de 	bl	8002800 <HAL_PWREx_GetVoltageRange>
 8003444:	6178      	str	r0, [r7, #20]
 8003446:	e014      	b.n	8003472 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	6593      	str	r3, [r2, #88]	; 0x58
 8003454:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003460:	f7ff f9ce 	bl	8002800 <HAL_PWREx_GetVoltageRange>
 8003464:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003466:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800346c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003470:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d10b      	bne.n	8003492 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d919      	bls.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2ba0      	cmp	r3, #160	; 0xa0
 8003484:	d902      	bls.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003486:	2302      	movs	r3, #2
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	e013      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800348c:	2301      	movs	r3, #1
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	e010      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b80      	cmp	r3, #128	; 0x80
 8003496:	d902      	bls.n	800349e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003498:	2303      	movs	r3, #3
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e00a      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d102      	bne.n	80034aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034a4:	2302      	movs	r3, #2
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e004      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b70      	cmp	r3, #112	; 0x70
 80034ae:	d101      	bne.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b0:	2301      	movs	r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 0207 	bic.w	r2, r3, #7
 80034bc:	4909      	ldr	r1, [pc, #36]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40022000 	.word	0x40022000

080034e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034f0:	2300      	movs	r3, #0
 80034f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034f4:	2300      	movs	r3, #0
 80034f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003500:	2b00      	cmp	r3, #0
 8003502:	d041      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003508:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800350c:	d02a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800350e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003512:	d824      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003518:	d008      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800351a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800351e:	d81e      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003528:	d010      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800352a:	e018      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800352c:	4b86      	ldr	r3, [pc, #536]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a85      	ldr	r2, [pc, #532]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003538:	e015      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3304      	adds	r3, #4
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f001 f829 	bl	8004598 <RCCEx_PLLSAI1_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800354a:	e00c      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3320      	adds	r3, #32
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f001 f914 	bl	8004780 <RCCEx_PLLSAI2_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800355c:	e003      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	74fb      	strb	r3, [r7, #19]
      break;
 8003562:	e000      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800356c:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357a:	4973      	ldr	r1, [pc, #460]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003582:	e001      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d041      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003598:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800359c:	d02a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800359e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035a2:	d824      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035a8:	d008      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035ae:	d81e      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80035b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b8:	d010      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035ba:	e018      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035bc:	4b62      	ldr	r3, [pc, #392]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a61      	ldr	r2, [pc, #388]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c8:	e015      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 ffe1 	bl	8004598 <RCCEx_PLLSAI1_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035da:	e00c      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3320      	adds	r3, #32
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 f8cc 	bl	8004780 <RCCEx_PLLSAI2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	74fb      	strb	r3, [r7, #19]
      break;
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035fc:	4b52      	ldr	r3, [pc, #328]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800360a:	494f      	ldr	r1, [pc, #316]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003612:	e001      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80a0 	beq.w	8003766 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	4a40      	ldr	r2, [pc, #256]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364a:	6593      	str	r3, [r2, #88]	; 0x58
 800364c:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003658:	2301      	movs	r3, #1
 800365a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365c:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3a      	ldr	r2, [pc, #232]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003668:	f7fd fbc4 	bl	8000df4 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800366e:	e009      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fd fbc0 	bl	8000df4 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d902      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	74fb      	strb	r3, [r7, #19]
        break;
 8003682:	e005      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ef      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d15c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003696:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01f      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d019      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036b4:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	4a20      	ldr	r2, [pc, #128]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fd fb7f 	bl	8000df4 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f8:	e00b      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fd fb7b 	bl	8000df4 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d902      	bls.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	74fb      	strb	r3, [r7, #19]
            break;
 8003710:	e006      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ec      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003736:	4904      	ldr	r1, [pc, #16]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
 8003744:	e006      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003754:	7c7b      	ldrb	r3, [r7, #17]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4b9e      	ldr	r3, [pc, #632]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	4a9d      	ldr	r2, [pc, #628]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003764:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003772:	4b98      	ldr	r3, [pc, #608]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f023 0203 	bic.w	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	4994      	ldr	r1, [pc, #592]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003794:	4b8f      	ldr	r3, [pc, #572]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f023 020c 	bic.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	498c      	ldr	r1, [pc, #560]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037b6:	4b87      	ldr	r3, [pc, #540]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	4983      	ldr	r1, [pc, #524]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037d8:	4b7e      	ldr	r3, [pc, #504]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	497b      	ldr	r1, [pc, #492]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	4972      	ldr	r1, [pc, #456]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381c:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	496a      	ldr	r1, [pc, #424]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800383e:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	4961      	ldr	r1, [pc, #388]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003860:	4b5c      	ldr	r3, [pc, #368]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	4959      	ldr	r1, [pc, #356]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003882:	4b54      	ldr	r3, [pc, #336]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	4950      	ldr	r1, [pc, #320]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a4:	4b4b      	ldr	r3, [pc, #300]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	4948      	ldr	r1, [pc, #288]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038c6:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	493f      	ldr	r1, [pc, #252]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d028      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038e8:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f6:	4937      	ldr	r1, [pc, #220]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003906:	d106      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003908:	4b32      	ldr	r3, [pc, #200]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a31      	ldr	r2, [pc, #196]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003912:	60d3      	str	r3, [r2, #12]
 8003914:	e011      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800391e:	d10c      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fe36 	bl	8004598 <RCCEx_PLLSAI1_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d028      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	491f      	ldr	r1, [pc, #124]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003964:	d106      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003970:	60d3      	str	r3, [r2, #12]
 8003972:	e011      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800397c:	d10c      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3304      	adds	r3, #4
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fe07 	bl	8004598 <RCCEx_PLLSAI1_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d02b      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b2:	4908      	ldr	r1, [pc, #32]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c2:	d109      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a02      	ldr	r2, [pc, #8]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ce:	60d3      	str	r3, [r2, #12]
 80039d0:	e014      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fdd5 	bl	8004598 <RCCEx_PLLSAI1_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d02f      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a08:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a16:	4928      	ldr	r1, [pc, #160]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a26:	d10d      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fdb2 	bl	8004598 <RCCEx_PLLSAI1_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a38:	7cfb      	ldrb	r3, [r7, #19]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d014      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	74bb      	strb	r3, [r7, #18]
 8003a42:	e011      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3320      	adds	r3, #32
 8003a52:	2102      	movs	r1, #2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fe93 	bl	8004780 <RCCEx_PLLSAI2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a82:	490d      	ldr	r1, [pc, #52]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa6:	4904      	ldr	r1, [pc, #16]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003aae:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000

08003abc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ace:	d13e      	bne.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003ad0:	4bb2      	ldr	r3, [pc, #712]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae2:	d028      	beq.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aea:	f200 8542 	bhi.w	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af4:	d005      	beq.n	8003b02 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afc:	d00e      	beq.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003afe:	f000 bd38 	b.w	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b02:	4ba6      	ldr	r3, [pc, #664]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	f040 8532 	bne.w	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b16:	61fb      	str	r3, [r7, #28]
      break;
 8003b18:	f000 bd2d 	b.w	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003b1c:	4b9f      	ldr	r3, [pc, #636]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	f040 8527 	bne.w	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003b2c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003b30:	61fb      	str	r3, [r7, #28]
      break;
 8003b32:	f000 bd22 	b.w	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b36:	4b99      	ldr	r3, [pc, #612]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b42:	f040 851c 	bne.w	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003b46:	4b96      	ldr	r3, [pc, #600]	; (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003b48:	61fb      	str	r3, [r7, #28]
      break;
 8003b4a:	f000 bd18 	b.w	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b4e:	4b93      	ldr	r3, [pc, #588]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d036      	beq.n	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d840      	bhi.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d003      	beq.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003b70:	e039      	b.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003b72:	4b8a      	ldr	r3, [pc, #552]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d116      	bne.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003b7e:	4b87      	ldr	r3, [pc, #540]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003b8a:	4b84      	ldr	r3, [pc, #528]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	e005      	b.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003b96:	4b81      	ldr	r3, [pc, #516]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	4a80      	ldr	r2, [pc, #512]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003baa:	e01f      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
      break;
 8003bb0:	e01c      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003bb2:	4b7a      	ldr	r3, [pc, #488]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	d102      	bne.n	8003bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003bc0:	4b79      	ldr	r3, [pc, #484]	; (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003bc2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003bc4:	e012      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
      break;
 8003bca:	e00f      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003bcc:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd8:	d102      	bne.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003bda:	4b74      	ldr	r3, [pc, #464]	; (8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003bdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003bde:	e005      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
      break;
 8003be4:	e002      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
      break;
 8003bea:	bf00      	nop
    }

    switch(PeriphClk)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bf2:	f000 80dd 	beq.w	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bfc:	f200 84c1 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c06:	f000 80d3 	beq.w	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c10:	f200 84b7 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1a:	f000 835f 	beq.w	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c24:	f200 84ad 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2e:	f000 847e 	beq.w	800452e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c38:	f200 84a3 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c42:	f000 82cd 	beq.w	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c4c:	f200 8499 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c56:	f000 80ab 	beq.w	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c60:	f200 848f 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6a:	f000 8090 	beq.w	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c74:	f200 8485 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7e:	d07f      	beq.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c86:	f200 847c 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c90:	f000 8403 	beq.w	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	f200 8472 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca4:	f000 83af 	beq.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cae:	f200 8468 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb8:	f000 8379 	beq.w	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc2:	f200 845e 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b80      	cmp	r3, #128	; 0x80
 8003cca:	f000 8344 	beq.w	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b80      	cmp	r3, #128	; 0x80
 8003cd2:	f200 8456 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d84b      	bhi.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 844f 	beq.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	2b1f      	cmp	r3, #31
 8003cea:	f200 844a 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003edd 	.word	0x08003edd
 8003cf8:	08003f4b 	.word	0x08003f4b
 8003cfc:	08004583 	.word	0x08004583
 8003d00:	08003fdf 	.word	0x08003fdf
 8003d04:	08004583 	.word	0x08004583
 8003d08:	08004583 	.word	0x08004583
 8003d0c:	08004583 	.word	0x08004583
 8003d10:	08004065 	.word	0x08004065
 8003d14:	08004583 	.word	0x08004583
 8003d18:	08004583 	.word	0x08004583
 8003d1c:	08004583 	.word	0x08004583
 8003d20:	08004583 	.word	0x08004583
 8003d24:	08004583 	.word	0x08004583
 8003d28:	08004583 	.word	0x08004583
 8003d2c:	08004583 	.word	0x08004583
 8003d30:	080040dd 	.word	0x080040dd
 8003d34:	08004583 	.word	0x08004583
 8003d38:	08004583 	.word	0x08004583
 8003d3c:	08004583 	.word	0x08004583
 8003d40:	08004583 	.word	0x08004583
 8003d44:	08004583 	.word	0x08004583
 8003d48:	08004583 	.word	0x08004583
 8003d4c:	08004583 	.word	0x08004583
 8003d50:	08004583 	.word	0x08004583
 8003d54:	08004583 	.word	0x08004583
 8003d58:	08004583 	.word	0x08004583
 8003d5c:	08004583 	.word	0x08004583
 8003d60:	08004583 	.word	0x08004583
 8003d64:	08004583 	.word	0x08004583
 8003d68:	08004583 	.word	0x08004583
 8003d6c:	08004583 	.word	0x08004583
 8003d70:	0800415f 	.word	0x0800415f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	f000 82c1 	beq.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003d7c:	f000 bc01 	b.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003d80:	69b9      	ldr	r1, [r7, #24]
 8003d82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003d86:	f000 fdd9 	bl	800493c <RCCEx_GetSAIxPeriphCLKFreq>
 8003d8a:	61f8      	str	r0, [r7, #28]
      break;
 8003d8c:	e3fa      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003d8e:	69b9      	ldr	r1, [r7, #24]
 8003d90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d94:	f000 fdd2 	bl	800493c <RCCEx_GetSAIxPeriphCLKFreq>
 8003d98:	61f8      	str	r0, [r7, #28]
      break;
 8003d9a:	e3f3      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	001312d0 	.word	0x001312d0
 8003da4:	080074cc 	.word	0x080074cc
 8003da8:	00f42400 	.word	0x00f42400
 8003dac:	02625a00 	.word	0x02625a00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003db0:	4ba9      	ldr	r3, [pc, #676]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dc2:	d00c      	beq.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dca:	d87f      	bhi.n	8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd2:	d04e      	beq.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dda:	d01d      	beq.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003ddc:	e076      	b.n	8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003dde:	4b9e      	ldr	r3, [pc, #632]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d172      	bne.n	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003dea:	4b9b      	ldr	r3, [pc, #620]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003df6:	4b98      	ldr	r3, [pc, #608]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	e005      	b.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003e02:	4b95      	ldr	r3, [pc, #596]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	4a93      	ldr	r2, [pc, #588]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e14:	61fb      	str	r3, [r7, #28]
          break;
 8003e16:	e05b      	b.n	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003e18:	4b8f      	ldr	r3, [pc, #572]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e24:	d156      	bne.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003e26:	4b8c      	ldr	r3, [pc, #560]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e32:	d14f      	bne.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e34:	4b88      	ldr	r3, [pc, #544]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e3e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	fb03 f202 	mul.w	r2, r3, r2
 8003e48:	4b83      	ldr	r3, [pc, #524]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	3301      	adds	r3, #1
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003e5a:	4b7f      	ldr	r3, [pc, #508]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	0d5b      	lsrs	r3, r3, #21
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	3301      	adds	r3, #1
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	61fb      	str	r3, [r7, #28]
          break;
 8003e70:	e030      	b.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003e72:	4b79      	ldr	r3, [pc, #484]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7e:	d12b      	bne.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003e80:	4b75      	ldr	r3, [pc, #468]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e8c:	d124      	bne.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003e8e:	4b72      	ldr	r3, [pc, #456]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	0a1b      	lsrs	r3, r3, #8
 8003e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e98:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	fb03 f202 	mul.w	r2, r3, r2
 8003ea2:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	3301      	adds	r3, #1
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003eb4:	4b68      	ldr	r3, [pc, #416]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	0d5b      	lsrs	r3, r3, #21
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	61fb      	str	r3, [r7, #28]
          break;
 8003eca:	e005      	b.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003ecc:	bf00      	nop
 8003ece:	e359      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ed0:	bf00      	nop
 8003ed2:	e357      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ed4:	bf00      	nop
 8003ed6:	e355      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ed8:	bf00      	nop
        break;
 8003eda:	e353      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003edc:	4b5e      	ldr	r3, [pc, #376]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d827      	bhi.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f05 	.word	0x08003f05
 8003ef8:	08003f0d 	.word	0x08003f0d
 8003efc:	08003f15 	.word	0x08003f15
 8003f00:	08003f29 	.word	0x08003f29
          frequency = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7ff fa7a 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8003f08:	61f8      	str	r0, [r7, #28]
          break;
 8003f0a:	e01d      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f0c:	f7ff f9c8 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8003f10:	61f8      	str	r0, [r7, #28]
          break;
 8003f12:	e019      	b.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f14:	4b50      	ldr	r3, [pc, #320]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f20:	d10f      	bne.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8003f22:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003f24:	61fb      	str	r3, [r7, #28]
          break;
 8003f26:	e00c      	b.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f28:	4b4b      	ldr	r3, [pc, #300]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d107      	bne.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3a:	61fb      	str	r3, [r7, #28]
          break;
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003f3e:	bf00      	nop
 8003f40:	e320      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f42:	bf00      	nop
 8003f44:	e31e      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f46:	bf00      	nop
        break;
 8003f48:	e31c      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003f4a:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b0c      	cmp	r3, #12
 8003f5a:	d83a      	bhi.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f99 	.word	0x08003f99
 8003f68:	08003fd3 	.word	0x08003fd3
 8003f6c:	08003fd3 	.word	0x08003fd3
 8003f70:	08003fd3 	.word	0x08003fd3
 8003f74:	08003fa1 	.word	0x08003fa1
 8003f78:	08003fd3 	.word	0x08003fd3
 8003f7c:	08003fd3 	.word	0x08003fd3
 8003f80:	08003fd3 	.word	0x08003fd3
 8003f84:	08003fa9 	.word	0x08003fa9
 8003f88:	08003fd3 	.word	0x08003fd3
 8003f8c:	08003fd3 	.word	0x08003fd3
 8003f90:	08003fd3 	.word	0x08003fd3
 8003f94:	08003fbd 	.word	0x08003fbd
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f98:	f7ff fa1a 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8003f9c:	61f8      	str	r0, [r7, #28]
          break;
 8003f9e:	e01d      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fa0:	f7ff f97e 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8003fa4:	61f8      	str	r0, [r7, #28]
          break;
 8003fa6:	e019      	b.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb4:	d10f      	bne.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8003fb6:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003fb8:	61fb      	str	r3, [r7, #28]
          break;
 8003fba:	e00c      	b.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d107      	bne.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8003fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fce:	61fb      	str	r3, [r7, #28]
          break;
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8003fd2:	bf00      	nop
 8003fd4:	e2d6      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fd6:	bf00      	nop
 8003fd8:	e2d4      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fda:	bf00      	nop
        break;
 8003fdc:	e2d2      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003fde:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b30      	cmp	r3, #48	; 0x30
 8003fee:	d021      	beq.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b30      	cmp	r3, #48	; 0x30
 8003ff4:	d829      	bhi.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d011      	beq.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d823      	bhi.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b10      	cmp	r3, #16
 800400c:	d004      	beq.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800400e:	e01c      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004010:	f7ff f9de 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004014:	61f8      	str	r0, [r7, #28]
          break;
 8004016:	e01d      	b.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004018:	f7ff f942 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800401c:	61f8      	str	r0, [r7, #28]
          break;
 800401e:	e019      	b.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d10f      	bne.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800402e:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004030:	61fb      	str	r3, [r7, #28]
          break;
 8004032:	e00c      	b.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004034:	4b08      	ldr	r3, [pc, #32]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d107      	bne.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	61fb      	str	r3, [r7, #28]
          break;
 8004048:	e003      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800404a:	bf00      	nop
 800404c:	e29a      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800404e:	bf00      	nop
 8004050:	e298      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004052:	bf00      	nop
        break;
 8004054:	e296      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	080074cc 	.word	0x080074cc
 8004060:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004064:	4b9b      	ldr	r3, [pc, #620]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2bc0      	cmp	r3, #192	; 0xc0
 8004074:	d021      	beq.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2bc0      	cmp	r3, #192	; 0xc0
 800407a:	d829      	bhi.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d011      	beq.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b80      	cmp	r3, #128	; 0x80
 8004086:	d823      	bhi.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d004      	beq.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004094:	e01c      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004096:	f7ff f99b 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800409a:	61f8      	str	r0, [r7, #28]
          break;
 800409c:	e01d      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800409e:	f7ff f8ff 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 80040a2:	61f8      	str	r0, [r7, #28]
          break;
 80040a4:	e019      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040a6:	4b8b      	ldr	r3, [pc, #556]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b2:	d10f      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80040b4:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80040b6:	61fb      	str	r3, [r7, #28]
          break;
 80040b8:	e00c      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040ba:	4b86      	ldr	r3, [pc, #536]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d107      	bne.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80040c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040cc:	61fb      	str	r3, [r7, #28]
          break;
 80040ce:	e003      	b.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80040d0:	bf00      	nop
 80040d2:	e257      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040d4:	bf00      	nop
 80040d6:	e255      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040d8:	bf00      	nop
        break;
 80040da:	e253      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80040dc:	4b7d      	ldr	r3, [pc, #500]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ee:	d025      	beq.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f6:	d82c      	bhi.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fe:	d013      	beq.n	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004106:	d824      	bhi.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d004      	beq.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004114:	d004      	beq.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8004116:	e01c      	b.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004118:	f7ff f95a 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800411c:	61f8      	str	r0, [r7, #28]
          break;
 800411e:	e01d      	b.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004120:	f7ff f8be 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8004124:	61f8      	str	r0, [r7, #28]
          break;
 8004126:	e019      	b.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004128:	4b6a      	ldr	r3, [pc, #424]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004134:	d10f      	bne.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004136:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004138:	61fb      	str	r3, [r7, #28]
          break;
 800413a:	e00c      	b.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800413c:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b02      	cmp	r3, #2
 8004148:	d107      	bne.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800414a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800414e:	61fb      	str	r3, [r7, #28]
          break;
 8004150:	e003      	b.n	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004152:	bf00      	nop
 8004154:	e216      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004156:	bf00      	nop
 8004158:	e214      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800415a:	bf00      	nop
        break;
 800415c:	e212      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800415e:	4b5d      	ldr	r3, [pc, #372]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004170:	d025      	beq.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004178:	d82c      	bhi.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004180:	d013      	beq.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004188:	d824      	bhi.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d004      	beq.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004198:	e01c      	b.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800419a:	f7ff f919 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800419e:	61f8      	str	r0, [r7, #28]
          break;
 80041a0:	e01d      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80041a2:	f7ff f87d 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 80041a6:	61f8      	str	r0, [r7, #28]
          break;
 80041a8:	e019      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041aa:	4b4a      	ldr	r3, [pc, #296]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b6:	d10f      	bne.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80041b8:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80041ba:	61fb      	str	r3, [r7, #28]
          break;
 80041bc:	e00c      	b.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041be:	4b45      	ldr	r3, [pc, #276]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d107      	bne.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80041cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d0:	61fb      	str	r3, [r7, #28]
          break;
 80041d2:	e003      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80041d4:	bf00      	nop
 80041d6:	e1d5      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041d8:	bf00      	nop
 80041da:	e1d3      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041dc:	bf00      	nop
        break;
 80041de:	e1d1      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80041e0:	4b3c      	ldr	r3, [pc, #240]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041f2:	d00c      	beq.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041fa:	d864      	bhi.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004202:	d008      	beq.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800420a:	d030      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800420c:	e05b      	b.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800420e:	f7ff f847 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8004212:	61f8      	str	r0, [r7, #28]
          break;
 8004214:	e05c      	b.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004216:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004222:	d152      	bne.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004224:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d04c      	beq.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004230:	4b28      	ldr	r3, [pc, #160]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800423a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	fb03 f202 	mul.w	r2, r3, r2
 8004244:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	3301      	adds	r3, #1
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004256:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	0e5b      	lsrs	r3, r3, #25
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	3301      	adds	r3, #1
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61fb      	str	r3, [r7, #28]
          break;
 800426c:	e02d      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800426e:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800427a:	d128      	bne.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800427c:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d022      	beq.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004292:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	fb03 f202 	mul.w	r2, r3, r2
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	3301      	adds	r3, #1
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	0e5b      	lsrs	r3, r3, #25
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	3301      	adds	r3, #1
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	61fb      	str	r3, [r7, #28]
          break;
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80042c6:	bf00      	nop
 80042c8:	e15c      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042ca:	bf00      	nop
 80042cc:	e15a      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042ce:	bf00      	nop
        break;
 80042d0:	e158      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80042dc:	4b9d      	ldr	r3, [pc, #628]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042e6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80042ee:	f7ff f885 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 80042f2:	61f8      	str	r0, [r7, #28]
        break;
 80042f4:	e146      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80042f6:	f7fe ffd3 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 80042fa:	61f8      	str	r0, [r7, #28]
        break;
 80042fc:	e142      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80042fe:	4b95      	ldr	r3, [pc, #596]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004310:	d013      	beq.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d819      	bhi.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004326:	d004      	beq.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004328:	e011      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800432a:	f7ff f851 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800432e:	61f8      	str	r0, [r7, #28]
          break;
 8004330:	e010      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004332:	f7fe ffb5 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8004336:	61f8      	str	r0, [r7, #28]
          break;
 8004338:	e00c      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800433a:	4b86      	ldr	r3, [pc, #536]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004346:	d104      	bne.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004348:	4b83      	ldr	r3, [pc, #524]	; (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800434a:	61fb      	str	r3, [r7, #28]
          break;
 800434c:	e001      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800434e:	bf00      	nop
 8004350:	e118      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004352:	bf00      	nop
        break;
 8004354:	e116      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004356:	4b7f      	ldr	r3, [pc, #508]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	d013      	beq.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	d819      	bhi.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800437e:	d004      	beq.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004380:	e011      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004382:	f7ff f825 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004386:	61f8      	str	r0, [r7, #28]
          break;
 8004388:	e010      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800438a:	f7fe ff89 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800438e:	61f8      	str	r0, [r7, #28]
          break;
 8004390:	e00c      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004392:	4b70      	ldr	r3, [pc, #448]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439e:	d104      	bne.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80043a0:	4b6d      	ldr	r3, [pc, #436]	; (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80043a2:	61fb      	str	r3, [r7, #28]
          break;
 80043a4:	e001      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80043a6:	bf00      	nop
 80043a8:	e0ec      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043aa:	bf00      	nop
        break;
 80043ac:	e0ea      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80043ae:	4b69      	ldr	r3, [pc, #420]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043c0:	d013      	beq.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043c8:	d819      	bhi.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d004      	beq.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d6:	d004      	beq.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80043d8:	e011      	b.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043da:	f7fe fff9 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 80043de:	61f8      	str	r0, [r7, #28]
          break;
 80043e0:	e010      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80043e2:	f7fe ff5d 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 80043e6:	61f8      	str	r0, [r7, #28]
          break;
 80043e8:	e00c      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043ea:	4b5a      	ldr	r3, [pc, #360]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f6:	d104      	bne.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80043f8:	4b57      	ldr	r3, [pc, #348]	; (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80043fa:	61fb      	str	r3, [r7, #28]
          break;
 80043fc:	e001      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80043fe:	bf00      	nop
 8004400:	e0c0      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004402:	bf00      	nop
        break;
 8004404:	e0be      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004406:	4b53      	ldr	r3, [pc, #332]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004418:	d02c      	beq.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004420:	d833      	bhi.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004428:	d01a      	beq.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004430:	d82b      	bhi.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800443e:	d004      	beq.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004440:	e023      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004442:	f7fe ffc5 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004446:	61f8      	str	r0, [r7, #28]
          break;
 8004448:	e026      	b.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800444a:	4b42      	ldr	r3, [pc, #264]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800444c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d11a      	bne.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004458:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800445c:	61fb      	str	r3, [r7, #28]
          break;
 800445e:	e016      	b.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004460:	4b3c      	ldr	r3, [pc, #240]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446c:	d111      	bne.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800446e:	4b3a      	ldr	r3, [pc, #232]	; (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004470:	61fb      	str	r3, [r7, #28]
          break;
 8004472:	e00e      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004474:	4b37      	ldr	r3, [pc, #220]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b02      	cmp	r3, #2
 8004480:	d109      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004486:	61fb      	str	r3, [r7, #28]
          break;
 8004488:	e005      	b.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800448a:	bf00      	nop
 800448c:	e07a      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800448e:	bf00      	nop
 8004490:	e078      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004492:	bf00      	nop
 8004494:	e076      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004496:	bf00      	nop
        break;
 8004498:	e074      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800449a:	4b2e      	ldr	r3, [pc, #184]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044ac:	d02c      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044b4:	d833      	bhi.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044bc:	d01a      	beq.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c4:	d82b      	bhi.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d2:	d004      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80044d4:	e023      	b.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044d6:	f7fe ff7b 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 80044da:	61f8      	str	r0, [r7, #28]
          break;
 80044dc:	e026      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044de:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80044e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d11a      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80044ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044f0:	61fb      	str	r3, [r7, #28]
          break;
 80044f2:	e016      	b.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044f4:	4b17      	ldr	r3, [pc, #92]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d111      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004502:	4b15      	ldr	r3, [pc, #84]	; (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004504:	61fb      	str	r3, [r7, #28]
          break;
 8004506:	e00e      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b02      	cmp	r3, #2
 8004514:	d109      	bne.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451a:	61fb      	str	r3, [r7, #28]
          break;
 800451c:	e005      	b.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800451e:	bf00      	nop
 8004520:	e030      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004522:	bf00      	nop
 8004524:	e02e      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004526:	bf00      	nop
 8004528:	e02c      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800452a:	bf00      	nop
        break;
 800452c:	e02a      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d009      	beq.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004548:	e012      	b.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800454a:	f7fe ff41 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800454e:	61f8      	str	r0, [r7, #28]
          break;
 8004550:	e00e      	b.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004568:	d101      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800456c:	61fb      	str	r3, [r7, #28]
          break;
 800456e:	bf00      	nop
        break;
 8004570:	e008      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004572:	bf00      	nop
 8004574:	e006      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004576:	bf00      	nop
 8004578:	e004      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800457a:	bf00      	nop
 800457c:	e002      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800457e:	bf00      	nop
 8004580:	e000      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004582:	bf00      	nop
    }
  }

  return(frequency);
 8004584:	69fb      	ldr	r3, [r7, #28]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
 8004594:	00f42400 	.word	0x00f42400

08004598 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045a6:	4b75      	ldr	r3, [pc, #468]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045b2:	4b72      	ldr	r3, [pc, #456]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0203 	and.w	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d10d      	bne.n	80045de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
       ||
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045ca:	4b6c      	ldr	r3, [pc, #432]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
       ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d047      	beq.n	800466e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	e044      	b.n	800466e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d018      	beq.n	800461e <RCCEx_PLLSAI1_Config+0x86>
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d825      	bhi.n	800463c <RCCEx_PLLSAI1_Config+0xa4>
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d002      	beq.n	80045fa <RCCEx_PLLSAI1_Config+0x62>
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d009      	beq.n	800460c <RCCEx_PLLSAI1_Config+0x74>
 80045f8:	e020      	b.n	800463c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045fa:	4b60      	ldr	r3, [pc, #384]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11d      	bne.n	8004642 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460a:	e01a      	b.n	8004642 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800460c:	4b5b      	ldr	r3, [pc, #364]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d116      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461c:	e013      	b.n	8004646 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800461e:	4b57      	ldr	r3, [pc, #348]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10f      	bne.n	800464a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800462a:	4b54      	ldr	r3, [pc, #336]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800463a:	e006      	b.n	800464a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      break;
 8004640:	e004      	b.n	800464c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004642:	bf00      	nop
 8004644:	e002      	b.n	800464c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004646:	bf00      	nop
 8004648:	e000      	b.n	800464c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800464a:	bf00      	nop
    }

    if(status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10d      	bne.n	800466e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004652:	4b4a      	ldr	r3, [pc, #296]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	3b01      	subs	r3, #1
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	430b      	orrs	r3, r1
 8004668:	4944      	ldr	r1, [pc, #272]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d17d      	bne.n	8004770 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004674:	4b41      	ldr	r3, [pc, #260]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a40      	ldr	r2, [pc, #256]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800467a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800467e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004680:	f7fc fbb8 	bl	8000df4 <HAL_GetTick>
 8004684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004686:	e009      	b.n	800469c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004688:	f7fc fbb4 	bl	8000df4 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d902      	bls.n	800469c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	73fb      	strb	r3, [r7, #15]
        break;
 800469a:	e005      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800469c:	4b37      	ldr	r3, [pc, #220]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ef      	bne.n	8004688 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d160      	bne.n	8004770 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d111      	bne.n	80046d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046b4:	4b31      	ldr	r3, [pc, #196]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6892      	ldr	r2, [r2, #8]
 80046c4:	0211      	lsls	r1, r2, #8
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68d2      	ldr	r2, [r2, #12]
 80046ca:	0912      	lsrs	r2, r2, #4
 80046cc:	0452      	lsls	r2, r2, #17
 80046ce:	430a      	orrs	r2, r1
 80046d0:	492a      	ldr	r1, [pc, #168]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	610b      	str	r3, [r1, #16]
 80046d6:	e027      	b.n	8004728 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d112      	bne.n	8004704 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046de:	4b27      	ldr	r3, [pc, #156]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6892      	ldr	r2, [r2, #8]
 80046ee:	0211      	lsls	r1, r2, #8
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6912      	ldr	r2, [r2, #16]
 80046f4:	0852      	lsrs	r2, r2, #1
 80046f6:	3a01      	subs	r2, #1
 80046f8:	0552      	lsls	r2, r2, #21
 80046fa:	430a      	orrs	r2, r1
 80046fc:	491f      	ldr	r1, [pc, #124]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	610b      	str	r3, [r1, #16]
 8004702:	e011      	b.n	8004728 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800470c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6892      	ldr	r2, [r2, #8]
 8004714:	0211      	lsls	r1, r2, #8
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6952      	ldr	r2, [r2, #20]
 800471a:	0852      	lsrs	r2, r2, #1
 800471c:	3a01      	subs	r2, #1
 800471e:	0652      	lsls	r2, r2, #25
 8004720:	430a      	orrs	r2, r1
 8004722:	4916      	ldr	r1, [pc, #88]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004724:	4313      	orrs	r3, r2
 8004726:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a13      	ldr	r2, [pc, #76]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800472e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004732:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fc fb5e 	bl	8000df4 <HAL_GetTick>
 8004738:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800473a:	e009      	b.n	8004750 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800473c:	f7fc fb5a 	bl	8000df4 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d902      	bls.n	8004750 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	73fb      	strb	r3, [r7, #15]
          break;
 800474e:	e005      	b.n	800475c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ef      	beq.n	800473c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	4904      	ldr	r1, [pc, #16]	; (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800476c:	4313      	orrs	r3, r2
 800476e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000

08004780 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800478e:	4b6a      	ldr	r3, [pc, #424]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d018      	beq.n	80047cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800479a:	4b67      	ldr	r3, [pc, #412]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0203 	and.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d10d      	bne.n	80047c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
       ||
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047b2:	4b61      	ldr	r3, [pc, #388]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
       ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d047      	beq.n	8004856 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
 80047ca:	e044      	b.n	8004856 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d018      	beq.n	8004806 <RCCEx_PLLSAI2_Config+0x86>
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d825      	bhi.n	8004824 <RCCEx_PLLSAI2_Config+0xa4>
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d002      	beq.n	80047e2 <RCCEx_PLLSAI2_Config+0x62>
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d009      	beq.n	80047f4 <RCCEx_PLLSAI2_Config+0x74>
 80047e0:	e020      	b.n	8004824 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047e2:	4b55      	ldr	r3, [pc, #340]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11d      	bne.n	800482a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047f2:	e01a      	b.n	800482a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047f4:	4b50      	ldr	r3, [pc, #320]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d116      	bne.n	800482e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004804:	e013      	b.n	800482e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004806:	4b4c      	ldr	r3, [pc, #304]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10f      	bne.n	8004832 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004812:	4b49      	ldr	r3, [pc, #292]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004822:	e006      	b.n	8004832 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
      break;
 8004828:	e004      	b.n	8004834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800482a:	bf00      	nop
 800482c:	e002      	b.n	8004834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800482e:	bf00      	nop
 8004830:	e000      	b.n	8004834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004832:	bf00      	nop
    }

    if(status == HAL_OK)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10d      	bne.n	8004856 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800483a:	4b3f      	ldr	r3, [pc, #252]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	3b01      	subs	r3, #1
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	430b      	orrs	r3, r1
 8004850:	4939      	ldr	r1, [pc, #228]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d167      	bne.n	800492c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800485c:	4b36      	ldr	r3, [pc, #216]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a35      	ldr	r2, [pc, #212]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004868:	f7fc fac4 	bl	8000df4 <HAL_GetTick>
 800486c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800486e:	e009      	b.n	8004884 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004870:	f7fc fac0 	bl	8000df4 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d902      	bls.n	8004884 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	73fb      	strb	r3, [r7, #15]
        break;
 8004882:	e005      	b.n	8004890 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004884:	4b2c      	ldr	r3, [pc, #176]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ef      	bne.n	8004870 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d14a      	bne.n	800492c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d111      	bne.n	80048c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800489c:	4b26      	ldr	r3, [pc, #152]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6892      	ldr	r2, [r2, #8]
 80048ac:	0211      	lsls	r1, r2, #8
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	0912      	lsrs	r2, r2, #4
 80048b4:	0452      	lsls	r2, r2, #17
 80048b6:	430a      	orrs	r2, r1
 80048b8:	491f      	ldr	r1, [pc, #124]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	614b      	str	r3, [r1, #20]
 80048be:	e011      	b.n	80048e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048c0:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6892      	ldr	r2, [r2, #8]
 80048d0:	0211      	lsls	r1, r2, #8
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6912      	ldr	r2, [r2, #16]
 80048d6:	0852      	lsrs	r2, r2, #1
 80048d8:	3a01      	subs	r2, #1
 80048da:	0652      	lsls	r2, r2, #25
 80048dc:	430a      	orrs	r2, r1
 80048de:	4916      	ldr	r1, [pc, #88]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048e4:	4b14      	ldr	r3, [pc, #80]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a13      	ldr	r2, [pc, #76]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fc fa80 	bl	8000df4 <HAL_GetTick>
 80048f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048f6:	e009      	b.n	800490c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048f8:	f7fc fa7c 	bl	8000df4 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d902      	bls.n	800490c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	73fb      	strb	r3, [r7, #15]
          break;
 800490a:	e005      	b.n	8004918 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ef      	beq.n	80048f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	4904      	ldr	r1, [pc, #16]	; (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	4313      	orrs	r3, r2
 800492a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000

0800493c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004958:	d10c      	bne.n	8004974 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800495a:	4b6e      	ldr	r3, [pc, #440]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004964:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800496c:	d112      	bne.n	8004994 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800496e:	4b6a      	ldr	r3, [pc, #424]	; (8004b18 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004970:	61fb      	str	r3, [r7, #28]
 8004972:	e00f      	b.n	8004994 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497a:	d10b      	bne.n	8004994 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800497c:	4b65      	ldr	r3, [pc, #404]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004986:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800498e:	d101      	bne.n	8004994 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004990:	4b61      	ldr	r3, [pc, #388]	; (8004b18 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004992:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f040 80b4 	bne.w	8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049a6:	d003      	beq.n	80049b0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ae:	d135      	bne.n	8004a1c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80049b0:	4b58      	ldr	r3, [pc, #352]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049bc:	f040 80a1 	bne.w	8004b02 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80049c0:	4b54      	ldr	r3, [pc, #336]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 809a 	beq.w	8004b02 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80049ce:	4b51      	ldr	r3, [pc, #324]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	3301      	adds	r3, #1
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80049e2:	4b4c      	ldr	r3, [pc, #304]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ec:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80049f4:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004a00:	2311      	movs	r3, #17
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	e001      	b.n	8004a0a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004a06:	2307      	movs	r3, #7
 8004a08:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	fb03 f202 	mul.w	r2, r3, r2
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004a1a:	e072      	b.n	8004b02 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d133      	bne.n	8004a8a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004a22:	4b3c      	ldr	r3, [pc, #240]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a2e:	d169      	bne.n	8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004a30:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d063      	beq.n	8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a3c:	4b35      	ldr	r3, [pc, #212]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	091b      	lsrs	r3, r3, #4
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	3301      	adds	r3, #1
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a50:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a5a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004a62:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004a6e:	2311      	movs	r3, #17
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e001      	b.n	8004a78 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004a74:	2307      	movs	r3, #7
 8004a76:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	fb03 f202 	mul.w	r2, r3, r2
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	e03c      	b.n	8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a90:	d003      	beq.n	8004a9a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a98:	d134      	bne.n	8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa6:	d12d      	bne.n	8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d027      	beq.n	8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	3301      	adds	r3, #1
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004ae6:	2311      	movs	r3, #17
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e001      	b.n	8004af0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004aec:	2307      	movs	r3, #7
 8004aee:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	fb03 f202 	mul.w	r2, r3, r2
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	61fb      	str	r3, [r7, #28]
 8004b00:	e000      	b.n	8004b04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004b02:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004b04:	69fb      	ldr	r3, [r7, #28]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3724      	adds	r7, #36	; 0x24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000
 8004b18:	001fff68 	.word	0x001fff68

08004b1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e022      	b.n	8004b74 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7fb ff53 	bl	80009ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2203      	movs	r2, #3
 8004b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f814 	bl	8004b7c <HAL_SD_InitCard>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e00a      	b.n	8004b74 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b7c:	b5b0      	push	{r4, r5, r7, lr}
 8004b7e:	b08e      	sub	sp, #56	; 0x38
 8004b80:	af04      	add	r7, sp, #16
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004b98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b9c:	f7fe ff8e 	bl	8003abc <HAL_RCCEx_GetPeriphCLKFreq>
 8004ba0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e07b      	b.n	8004cb4 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	09db      	lsrs	r3, r3, #7
 8004bc0:	4a3e      	ldr	r2, [pc, #248]	; (8004cbc <HAL_SD_InitCard+0x140>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	3b02      	subs	r3, #2
 8004bca:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681d      	ldr	r5, [r3, #0]
 8004bd0:	466c      	mov	r4, sp
 8004bd2:	f107 0314 	add.w	r3, r7, #20
 8004bd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004bda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004bde:	f107 0308 	add.w	r3, r7, #8
 8004be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004be4:	4628      	mov	r0, r5
 8004be6:	f001 fa06 	bl	8005ff6 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf8:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 fa44 	bl	800608c <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c12:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	3302      	adds	r3, #2
 8004c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8004c20:	4a27      	ldr	r2, [pc, #156]	; (8004cc0 <HAL_SD_InitCard+0x144>)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	3301      	adds	r3, #1
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fc f8ee 	bl	8000e0c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 ff27 	bl	8005a84 <SD_PowerON>
 8004c36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e02e      	b.n	8004cb4 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fe46 	bl	80058e8 <SD_InitCard>
 8004c5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00b      	beq.n	8004c7c <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e01b      	b.n	8004cb4 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c84:	4618      	mov	r0, r3
 8004c86:	f001 fa94 	bl	80061b2 <SDMMC_CmdBlockLength>
 8004c8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00f      	beq.n	8004cb2 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <HAL_SD_InitCard+0x148>)
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3728      	adds	r7, #40	; 0x28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bdb0      	pop	{r4, r5, r7, pc}
 8004cbc:	014f8b59 	.word	0x014f8b59
 8004cc0:	00012110 	.word	0x00012110
 8004cc4:	004005ff 	.word	0x004005ff

08004cc8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b092      	sub	sp, #72	; 0x48
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004cd6:	f7fc f88d 	bl	8000df4 <HAL_GetTick>
 8004cda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d107      	bne.n	8004cfa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e1bd      	b.n	8005076 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	f040 81b0 	bne.w	8005068 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	441a      	add	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d907      	bls.n	8004d2c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e1a4      	b.n	8005076 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2203      	movs	r2, #3
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d002      	beq.n	8004d4a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	025b      	lsls	r3, r3, #9
 8004d48:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	025b      	lsls	r3, r3, #9
 8004d54:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004d56:	2390      	movs	r3, #144	; 0x90
 8004d58:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f107 0214 	add.w	r2, r7, #20
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 f9f2 	bl	800615a <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d90a      	bls.n	8004d92 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 fa56 	bl	800623a <SDMMC_CmdReadMultiBlock>
 8004d8e:	6478      	str	r0, [r7, #68]	; 0x44
 8004d90:	e009      	b.n	8004da6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fa29 	bl	80061f6 <SDMMC_CmdReadSingleBlock>
 8004da4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d012      	beq.n	8004dd2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a7a      	ldr	r2, [pc, #488]	; (8004f9c <HAL_SD_ReadBlocks+0x2d4>)
 8004db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e151      	b.n	8005076 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004dd6:	e061      	b.n	8004e9c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d03c      	beq.n	8004e60 <HAL_SD_ReadBlocks+0x198>
 8004de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d039      	beq.n	8004e60 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004dec:	2300      	movs	r3, #0
 8004dee:	643b      	str	r3, [r7, #64]	; 0x40
 8004df0:	e033      	b.n	8004e5a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 f92a 	bl	8006050 <SDMMC_ReadFIFO>
 8004dfc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	3301      	adds	r3, #1
 8004e0a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1e:	3301      	adds	r3, #1
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e24:	3b01      	subs	r3, #1
 8004e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	3301      	adds	r3, #1
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	0e1b      	lsrs	r3, r3, #24
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e46:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e50:	3b01      	subs	r3, #1
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e56:	3301      	adds	r3, #1
 8004e58:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5c:	2b07      	cmp	r3, #7
 8004e5e:	d9c8      	bls.n	8004df2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004e60:	f7fb ffc8 	bl	8000df4 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d902      	bls.n	8004e76 <HAL_SD_ReadBlocks+0x1ae>
 8004e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d112      	bne.n	8004e9c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a48      	ldr	r2, [pc, #288]	; (8004f9c <HAL_SD_ReadBlocks+0x2d4>)
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e0ec      	b.n	8005076 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d096      	beq.n	8004dd8 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d022      	beq.n	8004efe <HAL_SD_ReadBlocks+0x236>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d91f      	bls.n	8004efe <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d01b      	beq.n	8004efe <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f001 fa1c 	bl	8006308 <SDMMC_CmdStopTransfer>
 8004ed0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d012      	beq.n	8004efe <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a2f      	ldr	r2, [pc, #188]	; (8004f9c <HAL_SD_ReadBlocks+0x2d4>)
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e0bb      	b.n	8005076 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d012      	beq.n	8004f32 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a22      	ldr	r2, [pc, #136]	; (8004f9c <HAL_SD_ReadBlocks+0x2d4>)
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	f043 0208 	orr.w	r2, r3, #8
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e0a1      	b.n	8005076 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d012      	beq.n	8004f66 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <HAL_SD_ReadBlocks+0x2d4>)
 8004f46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	f043 0202 	orr.w	r2, r3, #2
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e087      	b.n	8005076 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d064      	beq.n	800503e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a08      	ldr	r2, [pc, #32]	; (8004f9c <HAL_SD_ReadBlocks+0x2d4>)
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e06d      	b.n	8005076 <HAL_SD_ReadBlocks+0x3ae>
 8004f9a:	bf00      	nop
 8004f9c:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 f853 	bl	8006050 <SDMMC_ReadFIFO>
 8004faa:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fcc:	3301      	adds	r3, #1
 8004fce:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fde:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	0e1b      	lsrs	r3, r3, #24
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffe:	3b01      	subs	r3, #1
 8005000:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005002:	f7fb fef7 	bl	8000df4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800500e:	429a      	cmp	r2, r3
 8005010:	d902      	bls.n	8005018 <HAL_SD_ReadBlocks+0x350>
 8005012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005014:	2b00      	cmp	r3, #0
 8005016:	d112      	bne.n	800503e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a18      	ldr	r2, [pc, #96]	; (8005080 <HAL_SD_ReadBlocks+0x3b8>)
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e01b      	b.n	8005076 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_SD_ReadBlocks+0x38a>
 800504c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1a6      	bne.n	8004fa0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f240 523a 	movw	r2, #1338	; 0x53a
 800505a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	e006      	b.n	8005076 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
  }
}
 8005076:	4618      	mov	r0, r3
 8005078:	3748      	adds	r7, #72	; 0x48
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	004005ff 	.word	0x004005ff

08005084 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b092      	sub	sp, #72	; 0x48
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005092:	f7fb feaf 	bl	8000df4 <HAL_GetTick>
 8005096:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e165      	b.n	8005382 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b01      	cmp	r3, #1
 80050c0:	f040 8158 	bne.w	8005374 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80050ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d907      	bls.n	80050e8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e14c      	b.n	8005382 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2203      	movs	r2, #3
 80050ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2200      	movs	r2, #0
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d002      	beq.n	8005106 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	025b      	lsls	r3, r3, #9
 8005104:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	025b      	lsls	r3, r3, #9
 8005110:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005112:	2390      	movs	r3, #144	; 0x90
 8005114:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005116:	2300      	movs	r3, #0
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800511a:	2300      	movs	r3, #0
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800511e:	2301      	movs	r3, #1
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f107 0218 	add.w	r2, r7, #24
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f001 f814 	bl	800615a <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d90a      	bls.n	800514e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005144:	4618      	mov	r0, r3
 8005146:	f001 f8bc 	bl	80062c2 <SDMMC_CmdWriteMultiBlock>
 800514a:	6478      	str	r0, [r7, #68]	; 0x44
 800514c:	e009      	b.n	8005162 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2210      	movs	r2, #16
 8005152:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800515a:	4618      	mov	r0, r3
 800515c:	f001 f88f 	bl	800627e <SDMMC_CmdWriteSingleBlock>
 8005160:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005164:	2b00      	cmp	r3, #0
 8005166:	d012      	beq.n	800518e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a87      	ldr	r2, [pc, #540]	; (800538c <HAL_SD_WriteBlocks+0x308>)
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005176:	431a      	orrs	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0f9      	b.n	8005382 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005192:	e065      	b.n	8005260 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d040      	beq.n	8005224 <HAL_SD_WriteBlocks+0x1a0>
 80051a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d03d      	beq.n	8005224 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80051a8:	2300      	movs	r3, #0
 80051aa:	643b      	str	r3, [r7, #64]	; 0x40
 80051ac:	e037      	b.n	800521e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80051ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80051b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b6:	3301      	adds	r3, #1
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80051ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051bc:	3b01      	subs	r3, #1
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	021a      	lsls	r2, r3, #8
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80051cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ce:	3301      	adds	r3, #1
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80051d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d4:	3b01      	subs	r3, #1
 80051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80051d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	041a      	lsls	r2, r3, #16
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80051e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e6:	3301      	adds	r3, #1
 80051e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80051ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ec:	3b01      	subs	r3, #1
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80051f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	061a      	lsls	r2, r3, #24
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	3301      	adds	r3, #1
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005204:	3b01      	subs	r3, #1
 8005206:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f107 0214 	add.w	r2, r7, #20
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f000 ff29 	bl	800606a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521a:	3301      	adds	r3, #1
 800521c:	643b      	str	r3, [r7, #64]	; 0x40
 800521e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005220:	2b07      	cmp	r3, #7
 8005222:	d9c4      	bls.n	80051ae <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005224:	f7fb fde6 	bl	8000df4 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005230:	429a      	cmp	r2, r3
 8005232:	d902      	bls.n	800523a <HAL_SD_WriteBlocks+0x1b6>
 8005234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005236:	2b00      	cmp	r3, #0
 8005238:	d112      	bne.n	8005260 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a53      	ldr	r2, [pc, #332]	; (800538c <HAL_SD_WriteBlocks+0x308>)
 8005240:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005248:	431a      	orrs	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e090      	b.n	8005382 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005266:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800526a:	2b00      	cmp	r3, #0
 800526c:	d092      	beq.n	8005194 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005278:	2b00      	cmp	r3, #0
 800527a:	d022      	beq.n	80052c2 <HAL_SD_WriteBlocks+0x23e>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d91f      	bls.n	80052c2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	2b03      	cmp	r3, #3
 8005288:	d01b      	beq.n	80052c2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f001 f83a 	bl	8006308 <SDMMC_CmdStopTransfer>
 8005294:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005298:	2b00      	cmp	r3, #0
 800529a:	d012      	beq.n	80052c2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a3a      	ldr	r2, [pc, #232]	; (800538c <HAL_SD_WriteBlocks+0x308>)
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e05f      	b.n	8005382 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d012      	beq.n	80052f6 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2d      	ldr	r2, [pc, #180]	; (800538c <HAL_SD_WriteBlocks+0x308>)
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	f043 0208 	orr.w	r2, r3, #8
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e045      	b.n	8005382 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d012      	beq.n	800532a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a20      	ldr	r2, [pc, #128]	; (800538c <HAL_SD_WriteBlocks+0x308>)
 800530a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	f043 0202 	orr.w	r2, r3, #2
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e02b      	b.n	8005382 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	d012      	beq.n	800535e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a13      	ldr	r2, [pc, #76]	; (800538c <HAL_SD_WriteBlocks+0x308>)
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	f043 0210 	orr.w	r2, r3, #16
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e011      	b.n	8005382 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f240 523a 	movw	r2, #1338	; 0x53a
 8005366:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e006      	b.n	8005382 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
  }
}
 8005382:	4618      	mov	r0, r3
 8005384:	3748      	adds	r7, #72	; 0x48
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	004005ff 	.word	0x004005ff

08005390 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800539e:	0f9b      	lsrs	r3, r3, #30
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053aa:	0e9b      	lsrs	r3, r3, #26
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053bc:	0e1b      	lsrs	r3, r3, #24
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ce:	0c1b      	lsrs	r3, r3, #16
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f0:	0d1b      	lsrs	r3, r3, #20
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	b2da      	uxtb	r2, r3
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800540e:	0bdb      	lsrs	r3, r3, #15
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	b2da      	uxtb	r2, r3
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005420:	0b9b      	lsrs	r3, r3, #14
 8005422:	b2db      	uxtb	r3, r3
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	b2da      	uxtb	r2, r3
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005432:	0b5b      	lsrs	r3, r3, #13
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	b2da      	uxtb	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005444:	0b1b      	lsrs	r3, r3, #12
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	b2da      	uxtb	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545c:	2b00      	cmp	r3, #0
 800545e:	d163      	bne.n	8005528 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005464:	009a      	lsls	r2, r3, #2
 8005466:	f640 73fc 	movw	r3, #4092	; 0xffc
 800546a:	4013      	ands	r3, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005470:	0f92      	lsrs	r2, r2, #30
 8005472:	431a      	orrs	r2, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547c:	0edb      	lsrs	r3, r3, #27
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	b2da      	uxtb	r2, r3
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548e:	0e1b      	lsrs	r3, r3, #24
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	b2da      	uxtb	r2, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a0:	0d5b      	lsrs	r3, r3, #21
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b2:	0c9b      	lsrs	r3, r3, #18
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c4:	0bdb      	lsrs	r3, r3, #15
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	7e1b      	ldrb	r3, [r3, #24]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	3302      	adds	r3, #2
 80054e8:	2201      	movs	r2, #1
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80054f2:	fb03 f202 	mul.w	r2, r3, r2
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	7a1b      	ldrb	r3, [r3, #8]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	2201      	movs	r2, #1
 8005506:	409a      	lsls	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005514:	0a52      	lsrs	r2, r2, #9
 8005516:	fb03 f202 	mul.w	r2, r3, r2
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005524:	661a      	str	r2, [r3, #96]	; 0x60
 8005526:	e031      	b.n	800558c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552c:	2b01      	cmp	r3, #1
 800552e:	d11d      	bne.n	800556c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800553e:	0c1b      	lsrs	r3, r3, #16
 8005540:	431a      	orrs	r2, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	3301      	adds	r3, #1
 800554c:	029a      	lsls	r2, r3, #10
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005560:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	661a      	str	r2, [r3, #96]	; 0x60
 800556a:	e00f      	b.n	800558c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a58      	ldr	r2, [pc, #352]	; (80056d4 <HAL_SD_GetCardCSD+0x344>)
 8005572:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e09d      	b.n	80056c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	0b9b      	lsrs	r3, r3, #14
 8005592:	b2db      	uxtb	r3, r3
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	b2da      	uxtb	r2, r3
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a2:	09db      	lsrs	r3, r3, #7
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c4:	0fdb      	lsrs	r3, r3, #31
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d0:	0f5b      	lsrs	r3, r3, #29
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	0e9b      	lsrs	r3, r3, #26
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f4:	0d9b      	lsrs	r3, r3, #22
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	0d5b      	lsrs	r3, r3, #21
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	b2da      	uxtb	r2, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	b2da      	uxtb	r2, r3
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	0bdb      	lsrs	r3, r3, #15
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	b2da      	uxtb	r2, r3
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	0b9b      	lsrs	r3, r3, #14
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	b2da      	uxtb	r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	0b5b      	lsrs	r3, r3, #13
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	0b1b      	lsrs	r3, r3, #12
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	0a9b      	lsrs	r3, r3, #10
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	b2da      	uxtb	r2, r3
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	0a1b      	lsrs	r3, r3, #8
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	004005ff 	.word	0x004005ff

080056d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005730:	b5b0      	push	{r4, r5, r7, lr}
 8005732:	b090      	sub	sp, #64	; 0x40
 8005734:	af04      	add	r7, sp, #16
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2203      	movs	r2, #3
 8005744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574c:	2b03      	cmp	r3, #3
 800574e:	d02e      	beq.n	80057ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005756:	d106      	bne.n	8005766 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
 8005764:	e029      	b.n	80057ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800576c:	d10a      	bne.n	8005784 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fa3e 	bl	8005bf0 <SD_WideBus_Enable>
 8005774:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
 8005782:	e01a      	b.n	80057ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa7b 	bl	8005c86 <SD_WideBus_Disable>
 8005790:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
 800579e:	e00c      	b.n	80057ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
 80057ac:	e005      	b.n	80057ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a35      	ldr	r2, [pc, #212]	; (800589c <HAL_SD_ConfigWideBusOperation+0x16c>)
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80057d0:	e042      	b.n	8005858 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80057d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80057d6:	f7fe f971 	bl	8003abc <HAL_RCCEx_GetPeriphCLKFreq>
 80057da:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d031      	beq.n	8005846 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	3302      	adds	r3, #2
 8005804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <HAL_SD_ConfigWideBusOperation+0x170>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d907      	bls.n	8005820 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	4a24      	ldr	r2, [pc, #144]	; (80058a4 <HAL_SD_ConfigWideBusOperation+0x174>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	0ddb      	lsrs	r3, r3, #23
 800581a:	3b02      	subs	r3, #2
 800581c:	623b      	str	r3, [r7, #32]
 800581e:	e002      	b.n	8005826 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681d      	ldr	r5, [r3, #0]
 800582a:	466c      	mov	r4, sp
 800582c:	f107 0318 	add.w	r3, r7, #24
 8005830:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005834:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005838:	f107 030c 	add.w	r3, r7, #12
 800583c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fbd9 	bl	8005ff6 <SDMMC_Init>
 8005844:	e008      	b.n	8005858 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fca6 	bl	80061b2 <SDMMC_CmdBlockLength>
 8005866:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00c      	beq.n	8005888 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a0a      	ldr	r2, [pc, #40]	; (800589c <HAL_SD_ConfigWideBusOperation+0x16c>)
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005894:	4618      	mov	r0, r3
 8005896:	3730      	adds	r7, #48	; 0x30
 8005898:	46bd      	mov	sp, r7
 800589a:	bdb0      	pop	{r4, r5, r7, pc}
 800589c:	004005ff 	.word	0x004005ff
 80058a0:	017d7840 	.word	0x017d7840
 80058a4:	55e63b89 	.word	0x55e63b89

080058a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80058b4:	f107 030c 	add.w	r3, r7, #12
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f970 	bl	8005ba0 <SD_SendStatus>
 80058c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	0a5b      	lsrs	r3, r3, #9
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80058de:	693b      	ldr	r3, [r7, #16]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80058e8:	b5b0      	push	{r4, r5, r7, lr}
 80058ea:	b094      	sub	sp, #80	; 0x50
 80058ec:	af04      	add	r7, sp, #16
 80058ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80058f0:	2301      	movs	r3, #1
 80058f2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fbd6 	bl	80060aa <SDMMC_GetPowerState>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005904:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005908:	e0b8      	b.n	8005a7c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590e:	2b03      	cmp	r3, #3
 8005910:	d02f      	beq.n	8005972 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fe00 	bl	800651c <SDMMC_CmdSendCID>
 800591c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800591e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <SD_InitCard+0x40>
    {
      return errorstate;
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005926:	e0a9      	b.n	8005a7c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2100      	movs	r1, #0
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fc00 	bl	8006134 <SDMMC_GetResponse>
 8005934:	4602      	mov	r2, r0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2104      	movs	r1, #4
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fbf7 	bl	8006134 <SDMMC_GetResponse>
 8005946:	4602      	mov	r2, r0
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2108      	movs	r1, #8
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fbee 	bl	8006134 <SDMMC_GetResponse>
 8005958:	4602      	mov	r2, r0
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	210c      	movs	r1, #12
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fbe5 	bl	8006134 <SDMMC_GetResponse>
 800596a:	4602      	mov	r2, r0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	2b03      	cmp	r3, #3
 8005978:	d00d      	beq.n	8005996 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f107 020e 	add.w	r2, r7, #14
 8005982:	4611      	mov	r1, r2
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fe06 	bl	8006596 <SDMMC_CmdSetRelAdd>
 800598a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800598c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <SD_InitCard+0xae>
    {
      return errorstate;
 8005992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005994:	e072      	b.n	8005a7c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	2b03      	cmp	r3, #3
 800599c:	d036      	beq.n	8005a0c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800599e:	89fb      	ldrh	r3, [r7, #14]
 80059a0:	461a      	mov	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f000 fdd0 	bl	8006558 <SDMMC_CmdSendCSD>
 80059b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	e05b      	b.n	8005a7c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fbb2 	bl	8006134 <SDMMC_GetResponse>
 80059d0:	4602      	mov	r2, r0
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2104      	movs	r1, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fba9 	bl	8006134 <SDMMC_GetResponse>
 80059e2:	4602      	mov	r2, r0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2108      	movs	r1, #8
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fba0 	bl	8006134 <SDMMC_GetResponse>
 80059f4:	4602      	mov	r2, r0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	210c      	movs	r1, #12
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fb97 	bl	8006134 <SDMMC_GetResponse>
 8005a06:	4602      	mov	r2, r0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2104      	movs	r1, #4
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fb8e 	bl	8006134 <SDMMC_GetResponse>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	0d1a      	lsrs	r2, r3, #20
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005a20:	f107 0310 	add.w	r3, r7, #16
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff fcb2 	bl	8005390 <HAL_SD_GetCardCSD>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a36:	e021      	b.n	8005a7c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6819      	ldr	r1, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a40:	041b      	lsls	r3, r3, #16
 8005a42:	2200      	movs	r2, #0
 8005a44:	461c      	mov	r4, r3
 8005a46:	4615      	mov	r5, r2
 8005a48:	4622      	mov	r2, r4
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	f000 fc7d 	bl	800634c <SDMMC_CmdSelDesel>
 8005a52:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <SD_InitCard+0x176>
  {
    return errorstate;
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5c:	e00e      	b.n	8005a7c <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681d      	ldr	r5, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	466c      	mov	r4, sp
 8005a66:	f103 0210 	add.w	r2, r3, #16
 8005a6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a70:	3304      	adds	r3, #4
 8005a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a74:	4628      	mov	r0, r5
 8005a76:	f000 fabe 	bl	8005ff6 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3740      	adds	r7, #64	; 0x40
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bdb0      	pop	{r4, r5, r7, pc}

08005a84 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fc78 	bl	8006392 <SDMMC_CmdGoIdleState>
 8005aa2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <SD_PowerON+0x2a>
  {
    return errorstate;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	e072      	b.n	8005b94 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fc8b 	bl	80063ce <SDMMC_CmdOperCond>
 8005ab8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fc61 	bl	8006392 <SDMMC_CmdGoIdleState>
 8005ad0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	e05b      	b.n	8005b94 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d137      	bne.n	8005b5a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fc8b 	bl	800640c <SDMMC_CmdAppCommand>
 8005af6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d02d      	beq.n	8005b5a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005afe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b02:	e047      	b.n	8005b94 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fc7e 	bl	800640c <SDMMC_CmdAppCommand>
 8005b10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <SD_PowerON+0x98>
    {
      return errorstate;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	e03b      	b.n	8005b94 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	491e      	ldr	r1, [pc, #120]	; (8005b9c <SD_PowerON+0x118>)
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fc94 	bl	8006450 <SDMMC_CmdAppOperCommand>
 8005b28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b34:	e02e      	b.n	8005b94 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 faf9 	bl	8006134 <SDMMC_GetResponse>
 8005b42:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	0fdb      	lsrs	r3, r3, #31
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <SD_PowerON+0xcc>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <SD_PowerON+0xce>
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]

    count++;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d802      	bhi.n	8005b6a <SD_PowerON+0xe6>
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0cc      	beq.n	8005b04 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d902      	bls.n	8005b7a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b78:	e00c      	b.n	8005b94 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
 8005b8a:	e002      	b.n	8005b92 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	c1100000 	.word	0xc1100000

08005ba0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005bb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bb4:	e018      	b.n	8005be8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	f000 fd08 	bl	80065d8 <SDMMC_CmdSendStatus>
 8005bc8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	e009      	b.n	8005be8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 faaa 	bl	8006134 <SDMMC_GetResponse>
 8005be0:	4602      	mov	r2, r0
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2100      	movs	r1, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fa94 	bl	8006134 <SDMMC_GetResponse>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c16:	d102      	bne.n	8005c1e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c1c:	e02f      	b.n	8005c7e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c1e:	f107 030c 	add.w	r3, r7, #12
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f879 	bl	8005d1c <SD_FindSCR>
 8005c2a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	e023      	b.n	8005c7e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01c      	beq.n	8005c7a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f000 fbdd 	bl	800640c <SDMMC_CmdAppCommand>
 8005c52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	e00f      	b.n	8005c7e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2102      	movs	r1, #2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fc16 	bl	8006496 <SDMMC_CmdBusWidth>
 8005c6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	e003      	b.n	8005c7e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e001      	b.n	8005c7e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	2300      	movs	r3, #0
 8005c94:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fa49 	bl	8006134 <SDMMC_GetResponse>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cac:	d102      	bne.n	8005cb4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cb2:	e02f      	b.n	8005d14 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005cb4:	f107 030c 	add.w	r3, r7, #12
 8005cb8:	4619      	mov	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f82e 	bl	8005d1c <SD_FindSCR>
 8005cc0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	e023      	b.n	8005d14 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01c      	beq.n	8005d10 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f000 fb92 	bl	800640c <SDMMC_CmdAppCommand>
 8005ce8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	e00f      	b.n	8005d14 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fbcb 	bl	8006496 <SDMMC_CmdBusWidth>
 8005d00:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	e003      	b.n	8005d14 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e001      	b.n	8005d14 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005d1c:	b590      	push	{r4, r7, lr}
 8005d1e:	b08f      	sub	sp, #60	; 0x3c
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d26:	f7fb f865 	bl	8000df4 <HAL_GetTick>
 8005d2a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005d30:	2300      	movs	r3, #0
 8005d32:	60bb      	str	r3, [r7, #8]
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2108      	movs	r1, #8
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fa35 	bl	80061b2 <SDMMC_CmdBlockLength>
 8005d48:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	e0a9      	b.n	8005ea8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f000 fb53 	bl	800640c <SDMMC_CmdAppCommand>
 8005d66:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	e09a      	b.n	8005ea8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d72:	f04f 33ff 	mov.w	r3, #4294967295
 8005d76:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d78:	2308      	movs	r3, #8
 8005d7a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005d7c:	2330      	movs	r3, #48	; 0x30
 8005d7e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d80:	2302      	movs	r3, #2
 8005d82:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f107 0210 	add.w	r2, r7, #16
 8005d94:	4611      	mov	r1, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f9df 	bl	800615a <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fb9a 	bl	80064da <SDMMC_CmdSendSCR>
 8005da6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d022      	beq.n	8005df4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	e07a      	b.n	8005ea8 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00e      	beq.n	8005dde <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6819      	ldr	r1, [r3, #0]
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	f107 0208 	add.w	r2, r7, #8
 8005dcc:	18d4      	adds	r4, r2, r3
 8005dce:	4608      	mov	r0, r1
 8005dd0:	f000 f93e 	bl	8006050 <SDMMC_ReadFIFO>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	6023      	str	r3, [r4, #0]
      index++;
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dda:	3301      	adds	r3, #1
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005dde:	f7fb f809 	bl	8000df4 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d102      	bne.n	8005df4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005dee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005df2:	e059      	b.n	8005ea8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dfa:	f240 432a 	movw	r3, #1066	; 0x42a
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0d6      	beq.n	8005db2 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2208      	movs	r2, #8
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	e044      	b.n	8005ea8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2202      	movs	r2, #2
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e34:	2302      	movs	r3, #2
 8005e36:	e037      	b.n	8005ea8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e4e:	2320      	movs	r3, #32
 8005e50:	e02a      	b.n	8005ea8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	061a      	lsls	r2, r3, #24
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	0e1b      	lsrs	r3, r3, #24
 8005e78:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	601a      	str	r2, [r3, #0]
    scr++;
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	3304      	adds	r3, #4
 8005e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	061a      	lsls	r2, r3, #24
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	0e1b      	lsrs	r3, r3, #24
 8005ea0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	373c      	adds	r7, #60	; 0x3c
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd90      	pop	{r4, r7, pc}

08005eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e095      	b.n	8005fee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d108      	bne.n	8005edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed2:	d009      	beq.n	8005ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	61da      	str	r2, [r3, #28]
 8005eda:	e005      	b.n	8005ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fa fdd4 	bl	8000ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f28:	d902      	bls.n	8005f30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e002      	b.n	8005f36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f3e:	d007      	beq.n	8005f50 <HAL_SPI_Init+0xa0>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	ea42 0103 	orr.w	r1, r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	f003 0204 	and.w	r2, r3, #4
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005fcc:	ea42 0103 	orr.w	r1, r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	f107 001c 	add.w	r0, r7, #28
 8006004:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8006014:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8006018:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800601c:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006020:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006024:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006034:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	b004      	add	sp, #16
 800604e:	4770      	bx	lr

08006050 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2203      	movs	r2, #3
 8006098:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800609a:	2002      	movs	r0, #2
 800609c:	f7fa feb6 	bl	8000e0c <HAL_Delay>

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0303 	and.w	r3, r3, #3
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80060e4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80060ea:	431a      	orrs	r2, r3
                       Command->CPSM);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80060f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006100:	f023 030f 	bic.w	r3, r3, #15
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	b2db      	uxtb	r3, r3
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3314      	adds	r3, #20
 8006142:	461a      	mov	r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	4413      	add	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006180:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006186:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800618c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0

}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b088      	sub	sp, #32
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80061c0:	2310      	movs	r3, #16
 80061c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061c4:	2340      	movs	r3, #64	; 0x40
 80061c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061d2:	f107 0308 	add.w	r3, r7, #8
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff ff74 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80061de:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e2:	2110      	movs	r1, #16
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fa19 	bl	800661c <SDMMC_GetCmdResp1>
 80061ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061ec:	69fb      	ldr	r3, [r7, #28]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3720      	adds	r7, #32
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b088      	sub	sp, #32
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006204:	2311      	movs	r3, #17
 8006206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006208:	2340      	movs	r3, #64	; 0x40
 800620a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006214:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006216:	f107 0308 	add.w	r3, r7, #8
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff ff52 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006222:	f241 3288 	movw	r2, #5000	; 0x1388
 8006226:	2111      	movs	r1, #17
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f9f7 	bl	800661c <SDMMC_GetCmdResp1>
 800622e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006230:	69fb      	ldr	r3, [r7, #28]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3720      	adds	r7, #32
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b088      	sub	sp, #32
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006248:	2312      	movs	r3, #18
 800624a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800624c:	2340      	movs	r3, #64	; 0x40
 800624e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006258:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800625a:	f107 0308 	add.w	r3, r7, #8
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ff30 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006266:	f241 3288 	movw	r2, #5000	; 0x1388
 800626a:	2112      	movs	r1, #18
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f9d5 	bl	800661c <SDMMC_GetCmdResp1>
 8006272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006274:	69fb      	ldr	r3, [r7, #28]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b088      	sub	sp, #32
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800628c:	2318      	movs	r3, #24
 800628e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006290:	2340      	movs	r3, #64	; 0x40
 8006292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800629c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800629e:	f107 0308 	add.w	r3, r7, #8
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff ff0e 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80062aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ae:	2118      	movs	r1, #24
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f9b3 	bl	800661c <SDMMC_GetCmdResp1>
 80062b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062b8:	69fb      	ldr	r3, [r7, #28]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3720      	adds	r7, #32
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b088      	sub	sp, #32
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80062d0:	2319      	movs	r3, #25
 80062d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062d4:	2340      	movs	r3, #64	; 0x40
 80062d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062e2:	f107 0308 	add.w	r3, r7, #8
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff feec 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80062ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f2:	2119      	movs	r1, #25
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f991 	bl	800661c <SDMMC_GetCmdResp1>
 80062fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062fc:	69fb      	ldr	r3, [r7, #28]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006314:	230c      	movs	r3, #12
 8006316:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006318:	2340      	movs	r3, #64	; 0x40
 800631a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006324:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006326:	f107 0308 	add.w	r3, r7, #8
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff feca 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006332:	4a05      	ldr	r2, [pc, #20]	; (8006348 <SDMMC_CmdStopTransfer+0x40>)
 8006334:	210c      	movs	r1, #12
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f970 	bl	800661c <SDMMC_GetCmdResp1>
 800633c:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800633e:	69fb      	ldr	r3, [r7, #28]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3720      	adds	r7, #32
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	05f5e100 	.word	0x05f5e100

0800634c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	; 0x28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800635c:	2307      	movs	r3, #7
 800635e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006360:	2340      	movs	r3, #64	; 0x40
 8006362:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800636e:	f107 0310 	add.w	r3, r7, #16
 8006372:	4619      	mov	r1, r3
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f7ff fea6 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800637a:	f241 3288 	movw	r2, #5000	; 0x1388
 800637e:	2107      	movs	r1, #7
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f94b 	bl	800661c <SDMMC_GetCmdResp1>
 8006386:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800638a:	4618      	mov	r0, r3
 800638c:	3728      	adds	r7, #40	; 0x28
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b088      	sub	sp, #32
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80063a2:	2300      	movs	r3, #0
 80063a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063b0:	f107 0308 	add.w	r3, r7, #8
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fe85 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fb65 	bl	8006a8c <SDMMC_GetCmdError>
 80063c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063c4:	69fb      	ldr	r3, [r7, #28]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b088      	sub	sp, #32
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80063d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80063da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80063dc:	2308      	movs	r3, #8
 80063de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063e0:	2340      	movs	r3, #64	; 0x40
 80063e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063ee:	f107 0308 	add.w	r3, r7, #8
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff fe66 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 faf8 	bl	80069f0 <SDMMC_GetCmdResp7>
 8006400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006402:	69fb      	ldr	r3, [r7, #28]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800641a:	2337      	movs	r3, #55	; 0x37
 800641c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800641e:	2340      	movs	r3, #64	; 0x40
 8006420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800642a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800642c:	f107 0308 	add.w	r3, r7, #8
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff fe47 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006438:	f241 3288 	movw	r2, #5000	; 0x1388
 800643c:	2137      	movs	r1, #55	; 0x37
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f8ec 	bl	800661c <SDMMC_GetCmdResp1>
 8006444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006446:	69fb      	ldr	r3, [r7, #28]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006464:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006466:	2329      	movs	r3, #41	; 0x29
 8006468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800646a:	2340      	movs	r3, #64	; 0x40
 800646c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006476:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006478:	f107 0308 	add.w	r3, r7, #8
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff fe21 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f9ff 	bl	8006888 <SDMMC_GetCmdResp3>
 800648a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800648c:	69fb      	ldr	r3, [r7, #28]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b088      	sub	sp, #32
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80064a4:	2306      	movs	r3, #6
 80064a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064b6:	f107 0308 	add.w	r3, r7, #8
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff fe02 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80064c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c6:	2106      	movs	r1, #6
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f8a7 	bl	800661c <SDMMC_GetCmdResp1>
 80064ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064d0:	69fb      	ldr	r3, [r7, #28]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b088      	sub	sp, #32
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80064e6:	2333      	movs	r3, #51	; 0x33
 80064e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064ea:	2340      	movs	r3, #64	; 0x40
 80064ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064f8:	f107 0308 	add.w	r3, r7, #8
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff fde1 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006504:	f241 3288 	movw	r2, #5000	; 0x1388
 8006508:	2133      	movs	r1, #51	; 0x33
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f886 	bl	800661c <SDMMC_GetCmdResp1>
 8006510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006512:	69fb      	ldr	r3, [r7, #28]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006528:	2302      	movs	r3, #2
 800652a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800652c:	23c0      	movs	r3, #192	; 0xc0
 800652e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006538:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800653a:	f107 0308 	add.w	r3, r7, #8
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff fdc0 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f956 	bl	80067f8 <SDMMC_GetCmdResp2>
 800654c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800654e:	69fb      	ldr	r3, [r7, #28]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006566:	2309      	movs	r3, #9
 8006568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800656a:	23c0      	movs	r3, #192	; 0xc0
 800656c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006576:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006578:	f107 0308 	add.w	r3, r7, #8
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff fda1 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f937 	bl	80067f8 <SDMMC_GetCmdResp2>
 800658a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800658c:	69fb      	ldr	r3, [r7, #28]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b088      	sub	sp, #32
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80065a4:	2303      	movs	r3, #3
 80065a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80065a8:	2340      	movs	r3, #64	; 0x40
 80065aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80065ac:	2300      	movs	r3, #0
 80065ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80065b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80065b6:	f107 0308 	add.w	r3, r7, #8
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff fd82 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	2103      	movs	r1, #3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f99c 	bl	8006904 <SDMMC_GetCmdResp6>
 80065cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065ce:	69fb      	ldr	r3, [r7, #28]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3720      	adds	r7, #32
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80065e6:	230d      	movs	r3, #13
 80065e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80065ea:	2340      	movs	r3, #64	; 0x40
 80065ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80065f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80065f8:	f107 0308 	add.w	r3, r7, #8
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff fd61 	bl	80060c6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006604:	f241 3288 	movw	r2, #5000	; 0x1388
 8006608:	210d      	movs	r1, #13
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f806 	bl	800661c <SDMMC_GetCmdResp1>
 8006610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006612:	69fb      	ldr	r3, [r7, #28]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	460b      	mov	r3, r1
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800662a:	4b70      	ldr	r3, [pc, #448]	; (80067ec <SDMMC_GetCmdResp1+0x1d0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a70      	ldr	r2, [pc, #448]	; (80067f0 <SDMMC_GetCmdResp1+0x1d4>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	0a5a      	lsrs	r2, r3, #9
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	fb02 f303 	mul.w	r3, r2, r3
 800663c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	1e5a      	subs	r2, r3, #1
 8006642:	61fa      	str	r2, [r7, #28]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006648:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800664c:	e0c9      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0ef      	beq.n	800663e <SDMMC_GetCmdResp1+0x22>
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1ea      	bne.n	800663e <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2204      	movs	r2, #4
 8006678:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800667a:	2304      	movs	r3, #4
 800667c:	e0b1      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d004      	beq.n	8006694 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006690:	2301      	movs	r3, #1
 8006692:	e0a6      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	22c5      	movs	r2, #197	; 0xc5
 8006698:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff fd3d 	bl	800611a <SDMMC_GetCommandResponse>
 80066a0:	4603      	mov	r3, r0
 80066a2:	461a      	mov	r2, r3
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d001      	beq.n	80066ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e099      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80066ae:	2100      	movs	r1, #0
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7ff fd3f 	bl	8006134 <SDMMC_GetResponse>
 80066b6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4b4e      	ldr	r3, [pc, #312]	; (80067f4 <SDMMC_GetCmdResp1+0x1d8>)
 80066bc:	4013      	ands	r3, r2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e08d      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	da02      	bge.n	80066d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80066cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066d0:	e087      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80066dc:	2340      	movs	r3, #64	; 0x40
 80066de:	e080      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80066ea:	2380      	movs	r3, #128	; 0x80
 80066ec:	e079      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80066f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066fc:	e071      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800670c:	e069      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800671c:	e061      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800672c:	e059      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800673c:	e051      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800674c:	e049      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006758:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800675c:	e041      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676c:	e039      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800677c:	e031      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006788:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800678c:	e029      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006798:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800679c:	e021      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80067a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067ac:	e019      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80067b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80067bc:	e011      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80067c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067cc:	e009      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80067d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80067dc:	e001      	b.n	80067e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000000 	.word	0x20000000
 80067f0:	10624dd3 	.word	0x10624dd3
 80067f4:	fdffe008 	.word	0xfdffe008

080067f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006800:	4b1f      	ldr	r3, [pc, #124]	; (8006880 <SDMMC_GetCmdResp2+0x88>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1f      	ldr	r2, [pc, #124]	; (8006884 <SDMMC_GetCmdResp2+0x8c>)
 8006806:	fba2 2303 	umull	r2, r3, r2, r3
 800680a:	0a5b      	lsrs	r3, r3, #9
 800680c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006810:	fb02 f303 	mul.w	r3, r2, r3
 8006814:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	1e5a      	subs	r2, r3, #1
 800681a:	60fa      	str	r2, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d102      	bne.n	8006826 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006824:	e026      	b.n	8006874 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0ef      	beq.n	8006816 <SDMMC_GetCmdResp2+0x1e>
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1ea      	bne.n	8006816 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2204      	movs	r2, #4
 8006850:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006852:	2304      	movs	r3, #4
 8006854:	e00e      	b.n	8006874 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006868:	2301      	movs	r3, #1
 800686a:	e003      	b.n	8006874 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	22c5      	movs	r2, #197	; 0xc5
 8006870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	20000000 	.word	0x20000000
 8006884:	10624dd3 	.word	0x10624dd3

08006888 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006890:	4b1a      	ldr	r3, [pc, #104]	; (80068fc <SDMMC_GetCmdResp3+0x74>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1a      	ldr	r2, [pc, #104]	; (8006900 <SDMMC_GetCmdResp3+0x78>)
 8006896:	fba2 2303 	umull	r2, r3, r2, r3
 800689a:	0a5b      	lsrs	r3, r3, #9
 800689c:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a0:	fb02 f303 	mul.w	r3, r2, r3
 80068a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1e5a      	subs	r2, r3, #1
 80068aa:	60fa      	str	r2, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068b4:	e01b      	b.n	80068ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0ef      	beq.n	80068a6 <SDMMC_GetCmdResp3+0x1e>
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1ea      	bne.n	80068a6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2204      	movs	r2, #4
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068e2:	2304      	movs	r3, #4
 80068e4:	e003      	b.n	80068ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	22c5      	movs	r2, #197	; 0xc5
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20000000 	.word	0x20000000
 8006900:	10624dd3 	.word	0x10624dd3

08006904 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	460b      	mov	r3, r1
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006912:	4b35      	ldr	r3, [pc, #212]	; (80069e8 <SDMMC_GetCmdResp6+0xe4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a35      	ldr	r2, [pc, #212]	; (80069ec <SDMMC_GetCmdResp6+0xe8>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	0a5b      	lsrs	r3, r3, #9
 800691e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	1e5a      	subs	r2, r3, #1
 800692c:	61fa      	str	r2, [r7, #28]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d102      	bne.n	8006938 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006932:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006936:	e052      	b.n	80069de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0ef      	beq.n	8006928 <SDMMC_GetCmdResp6+0x24>
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1ea      	bne.n	8006928 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b00      	cmp	r3, #0
 800695c:	d004      	beq.n	8006968 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2204      	movs	r2, #4
 8006962:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006964:	2304      	movs	r3, #4
 8006966:	e03a      	b.n	80069de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800697a:	2301      	movs	r3, #1
 800697c:	e02f      	b.n	80069de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f7ff fbcb 	bl	800611a <SDMMC_GetCommandResponse>
 8006984:	4603      	mov	r3, r0
 8006986:	461a      	mov	r2, r3
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	4293      	cmp	r3, r2
 800698c:	d001      	beq.n	8006992 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800698e:	2301      	movs	r3, #1
 8006990:	e025      	b.n	80069de <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	22c5      	movs	r2, #197	; 0xc5
 8006996:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006998:	2100      	movs	r1, #0
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7ff fbca 	bl	8006134 <SDMMC_GetResponse>
 80069a0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	0c1b      	lsrs	r3, r3, #16
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	e011      	b.n	80069de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80069c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069c8:	e009      	b.n	80069de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80069d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069d8:	e001      	b.n	80069de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80069da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000000 	.word	0x20000000
 80069ec:	10624dd3 	.word	0x10624dd3

080069f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80069f8:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <SDMMC_GetCmdResp7+0x94>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a22      	ldr	r2, [pc, #136]	; (8006a88 <SDMMC_GetCmdResp7+0x98>)
 80069fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006a02:	0a5b      	lsrs	r3, r3, #9
 8006a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a08:	fb02 f303 	mul.w	r3, r2, r3
 8006a0c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1e5a      	subs	r2, r3, #1
 8006a12:	60fa      	str	r2, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a1c:	e02c      	b.n	8006a78 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0ef      	beq.n	8006a0e <SDMMC_GetCmdResp7+0x1e>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1ea      	bne.n	8006a0e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d004      	beq.n	8006a4e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2204      	movs	r2, #4
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a4a:	2304      	movs	r3, #4
 8006a4c:	e014      	b.n	8006a78 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d004      	beq.n	8006a64 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e009      	b.n	8006a78 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2240      	movs	r2, #64	; 0x40
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006a76:	2300      	movs	r3, #0

}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	20000000 	.word	0x20000000
 8006a88:	10624dd3 	.word	0x10624dd3

08006a8c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a94:	4b11      	ldr	r3, [pc, #68]	; (8006adc <SDMMC_GetCmdError+0x50>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a11      	ldr	r2, [pc, #68]	; (8006ae0 <SDMMC_GetCmdError+0x54>)
 8006a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9e:	0a5b      	lsrs	r3, r3, #9
 8006aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa4:	fb02 f303 	mul.w	r3, r2, r3
 8006aa8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	1e5a      	subs	r2, r3, #1
 8006aae:	60fa      	str	r2, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ab8:	e009      	b.n	8006ace <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f1      	beq.n	8006aaa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	22c5      	movs	r2, #197	; 0xc5
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000000 	.word	0x20000000
 8006ae0:	10624dd3 	.word	0x10624dd3

08006ae4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	f107 001c 	add.w	r0, r7, #28
 8006af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa70 	bl	8006fe8 <USB_CoreReset>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38
 8006b1e:	e005      	b.n	8006b2c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b38:	b004      	add	sp, #16
 8006b3a:	4770      	bx	lr

08006b3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f023 0201 	bic.w	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d115      	bne.n	8006bac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	f7fa f93d 	bl	8000e0c <HAL_Delay>
      ms++;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fa17 	bl	8006fcc <USB_GetMode>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d01e      	beq.n	8006be2 <USB_SetCurrentMode+0x84>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b31      	cmp	r3, #49	; 0x31
 8006ba8:	d9f0      	bls.n	8006b8c <USB_SetCurrentMode+0x2e>
 8006baa:	e01a      	b.n	8006be2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d115      	bne.n	8006bde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f7fa f924 	bl	8000e0c <HAL_Delay>
      ms++;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f9fe 	bl	8006fcc <USB_GetMode>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <USB_SetCurrentMode+0x84>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b31      	cmp	r3, #49	; 0x31
 8006bda:	d9f0      	bls.n	8006bbe <USB_SetCurrentMode+0x60>
 8006bdc:	e001      	b.n	8006be2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e005      	b.n	8006bee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b32      	cmp	r3, #50	; 0x32
 8006be6:	d101      	bne.n	8006bec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b086      	sub	sp, #24
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c12:	2300      	movs	r3, #0
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	e009      	b.n	8006c2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	3340      	adds	r3, #64	; 0x40
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	2200      	movs	r2, #0
 8006c24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b0e      	cmp	r3, #14
 8006c30:	d9f2      	bls.n	8006c18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d11c      	bne.n	8006c72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c46:	f043 0302 	orr.w	r3, r3, #2
 8006c4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	e005      	b.n	8006c7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c84:	461a      	mov	r2, r3
 8006c86:	2300      	movs	r3, #0
 8006c88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c90:	4619      	mov	r1, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c98:	461a      	mov	r2, r3
 8006c9a:	680b      	ldr	r3, [r1, #0]
 8006c9c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c9e:	2103      	movs	r1, #3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f959 	bl	8006f58 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ca6:	2110      	movs	r1, #16
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f8f1 	bl	8006e90 <USB_FlushTxFifo>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f91d 	bl	8006ef8 <USB_FlushRxFifo>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cce:	461a      	mov	r2, r3
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cda:	461a      	mov	r2, r3
 8006cdc:	2300      	movs	r3, #0
 8006cde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	e043      	b.n	8006d7a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d08:	d118      	bne.n	8006d3c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	e013      	b.n	8006d4e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d32:	461a      	mov	r2, r3
 8006d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	e008      	b.n	8006d4e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d48:	461a      	mov	r2, r3
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	3301      	adds	r3, #1
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d3b7      	bcc.n	8006cf2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d82:	2300      	movs	r3, #0
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	e043      	b.n	8006e10 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d9e:	d118      	bne.n	8006dd2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db2:	461a      	mov	r2, r3
 8006db4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	e013      	b.n	8006de4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	e008      	b.n	8006de4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	461a      	mov	r2, r3
 8006de0:	2300      	movs	r3, #0
 8006de2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df0:	461a      	mov	r2, r3
 8006df2:	2300      	movs	r3, #0
 8006df4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e02:	461a      	mov	r2, r3
 8006e04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d3b7      	bcc.n	8006d88 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	f043 0210 	orr.w	r2, r3, #16
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	4b10      	ldr	r3, [pc, #64]	; (8006e8c <USB_DevInit+0x294>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	f043 0208 	orr.w	r2, r3, #8
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d107      	bne.n	8006e7a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e72:	f043 0304 	orr.w	r3, r3, #4
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e86:	b004      	add	sp, #16
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	803c3800 	.word	0x803c3800

08006e90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4a13      	ldr	r2, [pc, #76]	; (8006ef4 <USB_FlushTxFifo+0x64>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d901      	bls.n	8006eb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e01b      	b.n	8006ee8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	daf2      	bge.n	8006e9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	019b      	lsls	r3, r3, #6
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <USB_FlushTxFifo+0x64>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e006      	b.n	8006ee8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d0f0      	beq.n	8006ec8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	00030d40 	.word	0x00030d40

08006ef8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a11      	ldr	r2, [pc, #68]	; (8006f54 <USB_FlushRxFifo+0x5c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e018      	b.n	8006f48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	daf2      	bge.n	8006f04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2210      	movs	r2, #16
 8006f26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <USB_FlushRxFifo+0x5c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e006      	b.n	8006f48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0310 	and.w	r3, r3, #16
 8006f42:	2b10      	cmp	r3, #16
 8006f44:	d0f0      	beq.n	8006f28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	00030d40 	.word	0x00030d40

08006f58 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b085      	sub	sp, #20
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fa4:	f023 0303 	bic.w	r3, r3, #3
 8006fa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fb8:	f043 0302 	orr.w	r3, r3, #2
 8006fbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4a13      	ldr	r2, [pc, #76]	; (800704c <USB_CoreReset+0x64>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d901      	bls.n	8007006 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e01b      	b.n	800703e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	daf2      	bge.n	8006ff4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f043 0201 	orr.w	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4a09      	ldr	r2, [pc, #36]	; (800704c <USB_CoreReset+0x64>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d901      	bls.n	8007030 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e006      	b.n	800703e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b01      	cmp	r3, #1
 800703a:	d0f0      	beq.n	800701e <USB_CoreReset+0x36>

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	00030d40 	.word	0x00030d40

08007050 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007054:	4904      	ldr	r1, [pc, #16]	; (8007068 <MX_FATFS_Init+0x18>)
 8007056:	4805      	ldr	r0, [pc, #20]	; (800706c <MX_FATFS_Init+0x1c>)
 8007058:	f000 f9e4 	bl	8007424 <FATFS_LinkDriver>
 800705c:	4603      	mov	r3, r0
 800705e:	461a      	mov	r2, r3
 8007060:	4b03      	ldr	r3, [pc, #12]	; (8007070 <MX_FATFS_Init+0x20>)
 8007062:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007064:	bf00      	nop
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000794 	.word	0x20000794
 800706c:	080074fc 	.word	0x080074fc
 8007070:	20000790 	.word	0x20000790

08007074 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800707e:	f000 f879 	bl	8007174 <BSP_SD_IsDetected>
 8007082:	4603      	mov	r3, r0
 8007084:	2b01      	cmp	r3, #1
 8007086:	d001      	beq.n	800708c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007088:	2302      	movs	r3, #2
 800708a:	e012      	b.n	80070b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800708c:	480b      	ldr	r0, [pc, #44]	; (80070bc <BSP_SD_Init+0x48>)
 800708e:	f7fd fd45 	bl	8004b1c <HAL_SD_Init>
 8007092:	4603      	mov	r3, r0
 8007094:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800709c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070a0:	4806      	ldr	r0, [pc, #24]	; (80070bc <BSP_SD_Init+0x48>)
 80070a2:	f7fe fb45 	bl	8005730 <HAL_SD_ConfigWideBusOperation>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80070b0:	79fb      	ldrb	r3, [r7, #7]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20000134 	.word	0x20000134

080070c0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af02      	add	r7, sp, #8
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	68f9      	ldr	r1, [r7, #12]
 80070dc:	4806      	ldr	r0, [pc, #24]	; (80070f8 <BSP_SD_ReadBlocks+0x38>)
 80070de:	f7fd fdf3 	bl	8004cc8 <HAL_SD_ReadBlocks>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20000134 	.word	0x20000134

080070fc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af02      	add	r7, sp, #8
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	4806      	ldr	r0, [pc, #24]	; (8007134 <BSP_SD_WriteBlocks+0x38>)
 800711a:	f7fd ffb3 	bl	8005084 <HAL_SD_WriteBlocks>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007128:	7dfb      	ldrb	r3, [r7, #23]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000134 	.word	0x20000134

08007138 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800713c:	4805      	ldr	r0, [pc, #20]	; (8007154 <BSP_SD_GetCardState+0x1c>)
 800713e:	f7fe fbb3 	bl	80058a8 <HAL_SD_GetCardState>
 8007142:	4603      	mov	r3, r0
 8007144:	2b04      	cmp	r3, #4
 8007146:	bf14      	ite	ne
 8007148:	2301      	movne	r3, #1
 800714a:	2300      	moveq	r3, #0
 800714c:	b2db      	uxtb	r3, r3
}
 800714e:	4618      	mov	r0, r3
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000134 	.word	0x20000134

08007158 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4803      	ldr	r0, [pc, #12]	; (8007170 <BSP_SD_GetCardInfo+0x18>)
 8007164:	f7fe fab8 	bl	80056d8 <HAL_SD_GetCardInfo>
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	20000134 	.word	0x20000134

08007174 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800717a:	2301      	movs	r3, #1
 800717c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800717e:	f000 f80b 	bl	8007198 <BSP_PlatformIsDetected>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007188:	2300      	movs	r3, #0
 800718a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	b2db      	uxtb	r3, r3
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800719e:	2301      	movs	r3, #1
 80071a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80071a2:	2180      	movs	r1, #128	; 0x80
 80071a4:	4806      	ldr	r0, [pc, #24]	; (80071c0 <BSP_PlatformIsDetected+0x28>)
 80071a6:	f7fb f88d 	bl	80022c4 <HAL_GPIO_ReadPin>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80071b0:	2300      	movs	r3, #0
 80071b2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80071b4:	79fb      	ldrb	r3, [r7, #7]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	48000800 	.word	0x48000800

080071c4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80071ce:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <SD_CheckStatus+0x38>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80071d4:	f7ff ffb0 	bl	8007138 <BSP_SD_GetCardState>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d107      	bne.n	80071ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80071de:	4b07      	ldr	r3, [pc, #28]	; (80071fc <SD_CheckStatus+0x38>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	4b04      	ldr	r3, [pc, #16]	; (80071fc <SD_CheckStatus+0x38>)
 80071ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80071ee:	4b03      	ldr	r3, [pc, #12]	; (80071fc <SD_CheckStatus+0x38>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	b2db      	uxtb	r3, r3
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000009 	.word	0x20000009

08007200 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800720a:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <SD_initialize+0x38>)
 800720c:	2201      	movs	r2, #1
 800720e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007210:	f7ff ff30 	bl	8007074 <BSP_SD_Init>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d107      	bne.n	800722a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff ffd1 	bl	80071c4 <SD_CheckStatus>
 8007222:	4603      	mov	r3, r0
 8007224:	461a      	mov	r2, r3
 8007226:	4b04      	ldr	r3, [pc, #16]	; (8007238 <SD_initialize+0x38>)
 8007228:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800722a:	4b03      	ldr	r3, [pc, #12]	; (8007238 <SD_initialize+0x38>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	b2db      	uxtb	r3, r3
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000009 	.word	0x20000009

0800723c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff ffbb 	bl	80071c4 <SD_CheckStatus>
 800724e:	4603      	mov	r3, r0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800726c:	f04f 33ff 	mov.w	r3, #4294967295
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	68b8      	ldr	r0, [r7, #8]
 8007276:	f7ff ff23 	bl	80070c0 <BSP_SD_ReadBlocks>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d107      	bne.n	8007290 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007280:	bf00      	nop
 8007282:	f7ff ff59 	bl	8007138 <BSP_SD_GetCardState>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1fa      	bne.n	8007282 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	4603      	mov	r3, r0
 80072a8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80072ae:	f04f 33ff 	mov.w	r3, #4294967295
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	68b8      	ldr	r0, [r7, #8]
 80072b8:	f7ff ff20 	bl	80070fc <BSP_SD_WriteBlocks>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d107      	bne.n	80072d2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80072c2:	bf00      	nop
 80072c4:	f7ff ff38 	bl	8007138 <BSP_SD_GetCardState>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1fa      	bne.n	80072c4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	; 0x30
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	603a      	str	r2, [r7, #0]
 80072e6:	71fb      	strb	r3, [r7, #7]
 80072e8:	460b      	mov	r3, r1
 80072ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80072f2:	4b25      	ldr	r3, [pc, #148]	; (8007388 <SD_ioctl+0xac>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <SD_ioctl+0x28>
 8007300:	2303      	movs	r3, #3
 8007302:	e03c      	b.n	800737e <SD_ioctl+0xa2>

  switch (cmd)
 8007304:	79bb      	ldrb	r3, [r7, #6]
 8007306:	2b03      	cmp	r3, #3
 8007308:	d834      	bhi.n	8007374 <SD_ioctl+0x98>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <SD_ioctl+0x34>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	08007321 	.word	0x08007321
 8007314:	08007329 	.word	0x08007329
 8007318:	08007341 	.word	0x08007341
 800731c:	0800735b 	.word	0x0800735b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007326:	e028      	b.n	800737a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007328:	f107 030c 	add.w	r3, r7, #12
 800732c:	4618      	mov	r0, r3
 800732e:	f7ff ff13 	bl	8007158 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800733e:	e01c      	b.n	800737a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007340:	f107 030c 	add.w	r3, r7, #12
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff ff07 	bl	8007158 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	b29a      	uxth	r2, r3
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007358:	e00f      	b.n	800737a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800735a:	f107 030c 	add.w	r3, r7, #12
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff fefa 	bl	8007158 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	0a5a      	lsrs	r2, r3, #9
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007372:	e002      	b.n	800737a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007374:	2304      	movs	r3, #4
 8007376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800737a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800737e:	4618      	mov	r0, r3
 8007380:	3730      	adds	r7, #48	; 0x30
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000009 	.word	0x20000009

0800738c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	4613      	mov	r3, r2
 8007398:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800739a:	2301      	movs	r3, #1
 800739c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80073a2:	4b1f      	ldr	r3, [pc, #124]	; (8007420 <FATFS_LinkDriverEx+0x94>)
 80073a4:	7a5b      	ldrb	r3, [r3, #9]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d131      	bne.n	8007410 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80073ac:	4b1c      	ldr	r3, [pc, #112]	; (8007420 <FATFS_LinkDriverEx+0x94>)
 80073ae:	7a5b      	ldrb	r3, [r3, #9]
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	4b1a      	ldr	r3, [pc, #104]	; (8007420 <FATFS_LinkDriverEx+0x94>)
 80073b6:	2100      	movs	r1, #0
 80073b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80073ba:	4b19      	ldr	r3, [pc, #100]	; (8007420 <FATFS_LinkDriverEx+0x94>)
 80073bc:	7a5b      	ldrb	r3, [r3, #9]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	4a17      	ldr	r2, [pc, #92]	; (8007420 <FATFS_LinkDriverEx+0x94>)
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80073ca:	4b15      	ldr	r3, [pc, #84]	; (8007420 <FATFS_LinkDriverEx+0x94>)
 80073cc:	7a5b      	ldrb	r3, [r3, #9]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	4b13      	ldr	r3, [pc, #76]	; (8007420 <FATFS_LinkDriverEx+0x94>)
 80073d4:	4413      	add	r3, r2
 80073d6:	79fa      	ldrb	r2, [r7, #7]
 80073d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80073da:	4b11      	ldr	r3, [pc, #68]	; (8007420 <FATFS_LinkDriverEx+0x94>)
 80073dc:	7a5b      	ldrb	r3, [r3, #9]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	b2d1      	uxtb	r1, r2
 80073e4:	4a0e      	ldr	r2, [pc, #56]	; (8007420 <FATFS_LinkDriverEx+0x94>)
 80073e6:	7251      	strb	r1, [r2, #9]
 80073e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80073ea:	7dbb      	ldrb	r3, [r7, #22]
 80073ec:	3330      	adds	r3, #48	; 0x30
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	3301      	adds	r3, #1
 80073f8:	223a      	movs	r2, #58	; 0x3a
 80073fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3302      	adds	r3, #2
 8007400:	222f      	movs	r2, #47	; 0x2f
 8007402:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	3303      	adds	r3, #3
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007410:	7dfb      	ldrb	r3, [r7, #23]
}
 8007412:	4618      	mov	r0, r3
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20000798 	.word	0x20000798

08007424 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800742e:	2200      	movs	r2, #0
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff ffaa 	bl	800738c <FATFS_LinkDriverEx>
 8007438:	4603      	mov	r3, r0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <__libc_init_array>:
 8007444:	b570      	push	{r4, r5, r6, lr}
 8007446:	4d0d      	ldr	r5, [pc, #52]	; (800747c <__libc_init_array+0x38>)
 8007448:	4c0d      	ldr	r4, [pc, #52]	; (8007480 <__libc_init_array+0x3c>)
 800744a:	1b64      	subs	r4, r4, r5
 800744c:	10a4      	asrs	r4, r4, #2
 800744e:	2600      	movs	r6, #0
 8007450:	42a6      	cmp	r6, r4
 8007452:	d109      	bne.n	8007468 <__libc_init_array+0x24>
 8007454:	4d0b      	ldr	r5, [pc, #44]	; (8007484 <__libc_init_array+0x40>)
 8007456:	4c0c      	ldr	r4, [pc, #48]	; (8007488 <__libc_init_array+0x44>)
 8007458:	f000 f820 	bl	800749c <_init>
 800745c:	1b64      	subs	r4, r4, r5
 800745e:	10a4      	asrs	r4, r4, #2
 8007460:	2600      	movs	r6, #0
 8007462:	42a6      	cmp	r6, r4
 8007464:	d105      	bne.n	8007472 <__libc_init_array+0x2e>
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	f855 3b04 	ldr.w	r3, [r5], #4
 800746c:	4798      	blx	r3
 800746e:	3601      	adds	r6, #1
 8007470:	e7ee      	b.n	8007450 <__libc_init_array+0xc>
 8007472:	f855 3b04 	ldr.w	r3, [r5], #4
 8007476:	4798      	blx	r3
 8007478:	3601      	adds	r6, #1
 800747a:	e7f2      	b.n	8007462 <__libc_init_array+0x1e>
 800747c:	08007510 	.word	0x08007510
 8007480:	08007510 	.word	0x08007510
 8007484:	08007510 	.word	0x08007510
 8007488:	08007514 	.word	0x08007514

0800748c <memset>:
 800748c:	4402      	add	r2, r0
 800748e:	4603      	mov	r3, r0
 8007490:	4293      	cmp	r3, r2
 8007492:	d100      	bne.n	8007496 <memset+0xa>
 8007494:	4770      	bx	lr
 8007496:	f803 1b01 	strb.w	r1, [r3], #1
 800749a:	e7f9      	b.n	8007490 <memset+0x4>

0800749c <_init>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr

080074a8 <_fini>:
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	bf00      	nop
 80074ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ae:	bc08      	pop	{r3}
 80074b0:	469e      	mov	lr, r3
 80074b2:	4770      	bx	lr
